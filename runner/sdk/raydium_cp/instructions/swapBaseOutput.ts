/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_CP_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWAP_BASE_OUTPUT_DISCRIMINATOR = new Uint8Array([
  55, 217, 98, 86, 163, 74, 180, 173,
]);

export function getSwapBaseOutputDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SWAP_BASE_OUTPUT_DISCRIMINATOR
  );
}

export type SwapBaseOutputInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountAmmConfig extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountInputTokenAccount extends string | AccountMeta<string> = string,
  TAccountOutputTokenAccount extends string | AccountMeta<string> = string,
  TAccountInputVault extends string | AccountMeta<string> = string,
  TAccountOutputVault extends string | AccountMeta<string> = string,
  TAccountInputTokenProgram extends string | AccountMeta<string> = string,
  TAccountOutputTokenProgram extends string | AccountMeta<string> = string,
  TAccountInputTokenMint extends string | AccountMeta<string> = string,
  TAccountOutputTokenMint extends string | AccountMeta<string> = string,
  TAccountObservationState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountAmmConfig extends string
        ? ReadonlyAccount<TAccountAmmConfig>
        : TAccountAmmConfig,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountInputTokenAccount extends string
        ? WritableAccount<TAccountInputTokenAccount>
        : TAccountInputTokenAccount,
      TAccountOutputTokenAccount extends string
        ? WritableAccount<TAccountOutputTokenAccount>
        : TAccountOutputTokenAccount,
      TAccountInputVault extends string
        ? WritableAccount<TAccountInputVault>
        : TAccountInputVault,
      TAccountOutputVault extends string
        ? WritableAccount<TAccountOutputVault>
        : TAccountOutputVault,
      TAccountInputTokenProgram extends string
        ? ReadonlyAccount<TAccountInputTokenProgram>
        : TAccountInputTokenProgram,
      TAccountOutputTokenProgram extends string
        ? ReadonlyAccount<TAccountOutputTokenProgram>
        : TAccountOutputTokenProgram,
      TAccountInputTokenMint extends string
        ? ReadonlyAccount<TAccountInputTokenMint>
        : TAccountInputTokenMint,
      TAccountOutputTokenMint extends string
        ? ReadonlyAccount<TAccountOutputTokenMint>
        : TAccountOutputTokenMint,
      TAccountObservationState extends string
        ? WritableAccount<TAccountObservationState>
        : TAccountObservationState,
      ...TRemainingAccounts,
    ]
  >;

export type SwapBaseOutputInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmountIn: bigint;
  amountOut: bigint;
};

export type SwapBaseOutputInstructionDataArgs = {
  maxAmountIn: number | bigint;
  amountOut: number | bigint;
};

export function getSwapBaseOutputInstructionDataEncoder(): FixedSizeEncoder<SwapBaseOutputInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmountIn', getU64Encoder()],
      ['amountOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_BASE_OUTPUT_DISCRIMINATOR })
  );
}

export function getSwapBaseOutputInstructionDataDecoder(): FixedSizeDecoder<SwapBaseOutputInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmountIn', getU64Decoder()],
    ['amountOut', getU64Decoder()],
  ]);
}

export function getSwapBaseOutputInstructionDataCodec(): FixedSizeCodec<
  SwapBaseOutputInstructionDataArgs,
  SwapBaseOutputInstructionData
> {
  return combineCodec(
    getSwapBaseOutputInstructionDataEncoder(),
    getSwapBaseOutputInstructionDataDecoder()
  );
}

export type SwapBaseOutputInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountPoolState extends string = string,
  TAccountInputTokenAccount extends string = string,
  TAccountOutputTokenAccount extends string = string,
  TAccountInputVault extends string = string,
  TAccountOutputVault extends string = string,
  TAccountInputTokenProgram extends string = string,
  TAccountOutputTokenProgram extends string = string,
  TAccountInputTokenMint extends string = string,
  TAccountOutputTokenMint extends string = string,
  TAccountObservationState extends string = string,
> = {
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  authority: Address<TAccountAuthority>;
  /** The factory state to read protocol fees */
  ammConfig: Address<TAccountAmmConfig>;
  /** The program account of the pool in which the swap will be performed */
  poolState: Address<TAccountPoolState>;
  /** The user token account for input token */
  inputTokenAccount: Address<TAccountInputTokenAccount>;
  /** The user token account for output token */
  outputTokenAccount: Address<TAccountOutputTokenAccount>;
  /** The vault token account for input token */
  inputVault: Address<TAccountInputVault>;
  /** The vault token account for output token */
  outputVault: Address<TAccountOutputVault>;
  /** SPL program for input token transfers */
  inputTokenProgram: Address<TAccountInputTokenProgram>;
  /** SPL program for output token transfers */
  outputTokenProgram: Address<TAccountOutputTokenProgram>;
  /** The mint of input token */
  inputTokenMint: Address<TAccountInputTokenMint>;
  /** The mint of output token */
  outputTokenMint: Address<TAccountOutputTokenMint>;
  /** The program account for the most recent oracle observation */
  observationState: Address<TAccountObservationState>;
  maxAmountIn: SwapBaseOutputInstructionDataArgs['maxAmountIn'];
  amountOut: SwapBaseOutputInstructionDataArgs['amountOut'];
};

export function getSwapBaseOutputInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountAmmConfig extends string,
  TAccountPoolState extends string,
  TAccountInputTokenAccount extends string,
  TAccountOutputTokenAccount extends string,
  TAccountInputVault extends string,
  TAccountOutputVault extends string,
  TAccountInputTokenProgram extends string,
  TAccountOutputTokenProgram extends string,
  TAccountInputTokenMint extends string,
  TAccountOutputTokenMint extends string,
  TAccountObservationState extends string,
  TProgramAddress extends Address = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
>(
  input: SwapBaseOutputInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountAmmConfig,
    TAccountPoolState,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountInputVault,
    TAccountOutputVault,
    TAccountInputTokenProgram,
    TAccountOutputTokenProgram,
    TAccountInputTokenMint,
    TAccountOutputTokenMint,
    TAccountObservationState
  >,
  config?: { programAddress?: TProgramAddress }
): SwapBaseOutputInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountAmmConfig,
  TAccountPoolState,
  TAccountInputTokenAccount,
  TAccountOutputTokenAccount,
  TAccountInputVault,
  TAccountOutputVault,
  TAccountInputTokenProgram,
  TAccountOutputTokenProgram,
  TAccountInputTokenMint,
  TAccountOutputTokenMint,
  TAccountObservationState
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_CP_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    inputTokenAccount: {
      value: input.inputTokenAccount ?? null,
      isWritable: true,
    },
    outputTokenAccount: {
      value: input.outputTokenAccount ?? null,
      isWritable: true,
    },
    inputVault: { value: input.inputVault ?? null, isWritable: true },
    outputVault: { value: input.outputVault ?? null, isWritable: true },
    inputTokenProgram: {
      value: input.inputTokenProgram ?? null,
      isWritable: false,
    },
    outputTokenProgram: {
      value: input.outputTokenProgram ?? null,
      isWritable: false,
    },
    inputTokenMint: { value: input.inputTokenMint ?? null, isWritable: false },
    outputTokenMint: {
      value: input.outputTokenMint ?? null,
      isWritable: false,
    },
    observationState: {
      value: input.observationState ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.inputTokenAccount),
      getAccountMeta(accounts.outputTokenAccount),
      getAccountMeta(accounts.inputVault),
      getAccountMeta(accounts.outputVault),
      getAccountMeta(accounts.inputTokenProgram),
      getAccountMeta(accounts.outputTokenProgram),
      getAccountMeta(accounts.inputTokenMint),
      getAccountMeta(accounts.outputTokenMint),
      getAccountMeta(accounts.observationState),
    ],
    data: getSwapBaseOutputInstructionDataEncoder().encode(
      args as SwapBaseOutputInstructionDataArgs
    ),
    programAddress,
  } as SwapBaseOutputInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountAmmConfig,
    TAccountPoolState,
    TAccountInputTokenAccount,
    TAccountOutputTokenAccount,
    TAccountInputVault,
    TAccountOutputVault,
    TAccountInputTokenProgram,
    TAccountOutputTokenProgram,
    TAccountInputTokenMint,
    TAccountOutputTokenMint,
    TAccountObservationState
  >);
}

export type ParsedSwapBaseOutputInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The user performing the swap */
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** The factory state to read protocol fees */
    ammConfig: TAccountMetas[2];
    /** The program account of the pool in which the swap will be performed */
    poolState: TAccountMetas[3];
    /** The user token account for input token */
    inputTokenAccount: TAccountMetas[4];
    /** The user token account for output token */
    outputTokenAccount: TAccountMetas[5];
    /** The vault token account for input token */
    inputVault: TAccountMetas[6];
    /** The vault token account for output token */
    outputVault: TAccountMetas[7];
    /** SPL program for input token transfers */
    inputTokenProgram: TAccountMetas[8];
    /** SPL program for output token transfers */
    outputTokenProgram: TAccountMetas[9];
    /** The mint of input token */
    inputTokenMint: TAccountMetas[10];
    /** The mint of output token */
    outputTokenMint: TAccountMetas[11];
    /** The program account for the most recent oracle observation */
    observationState: TAccountMetas[12];
  };
  data: SwapBaseOutputInstructionData;
};

export function parseSwapBaseOutputInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwapBaseOutputInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      ammConfig: getNextAccount(),
      poolState: getNextAccount(),
      inputTokenAccount: getNextAccount(),
      outputTokenAccount: getNextAccount(),
      inputVault: getNextAccount(),
      outputVault: getNextAccount(),
      inputTokenProgram: getNextAccount(),
      outputTokenProgram: getNextAccount(),
      inputTokenMint: getNextAccount(),
      outputTokenMint: getNextAccount(),
      observationState: getNextAccount(),
    },
    data: getSwapBaseOutputInstructionDataDecoder().decode(instruction.data),
  };
}
