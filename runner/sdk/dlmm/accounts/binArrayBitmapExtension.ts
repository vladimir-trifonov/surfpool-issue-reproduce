/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR = new Uint8Array([
  80, 111, 124, 113, 55, 237, 18, 5,
]);

export function getBinArrayBitmapExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR
  );
}

export type BinArrayBitmapExtension = {
  discriminator: ReadonlyUint8Array;
  lbPair: Address;
  /** Packed initialized bin array state for start_bin_index is positive */
  positiveBinArrayBitmap: Array<Array<bigint>>;
  /** Packed initialized bin array state for start_bin_index is negative */
  negativeBinArrayBitmap: Array<Array<bigint>>;
};

export type BinArrayBitmapExtensionArgs = {
  lbPair: Address;
  /** Packed initialized bin array state for start_bin_index is positive */
  positiveBinArrayBitmap: Array<Array<number | bigint>>;
  /** Packed initialized bin array state for start_bin_index is negative */
  negativeBinArrayBitmap: Array<Array<number | bigint>>;
};

export function getBinArrayBitmapExtensionEncoder(): FixedSizeEncoder<BinArrayBitmapExtensionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lbPair', getAddressEncoder()],
      [
        'positiveBinArrayBitmap',
        getArrayEncoder(getArrayEncoder(getU64Encoder(), { size: 8 }), {
          size: 12,
        }),
      ],
      [
        'negativeBinArrayBitmap',
        getArrayEncoder(getArrayEncoder(getU64Encoder(), { size: 8 }), {
          size: 12,
        }),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR,
    })
  );
}

export function getBinArrayBitmapExtensionDecoder(): FixedSizeDecoder<BinArrayBitmapExtension> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lbPair', getAddressDecoder()],
    [
      'positiveBinArrayBitmap',
      getArrayDecoder(getArrayDecoder(getU64Decoder(), { size: 8 }), {
        size: 12,
      }),
    ],
    [
      'negativeBinArrayBitmap',
      getArrayDecoder(getArrayDecoder(getU64Decoder(), { size: 8 }), {
        size: 12,
      }),
    ],
  ]);
}

export function getBinArrayBitmapExtensionCodec(): FixedSizeCodec<
  BinArrayBitmapExtensionArgs,
  BinArrayBitmapExtension
> {
  return combineCodec(
    getBinArrayBitmapExtensionEncoder(),
    getBinArrayBitmapExtensionDecoder()
  );
}

export function decodeBinArrayBitmapExtension<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BinArrayBitmapExtension, TAddress>;
export function decodeBinArrayBitmapExtension<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BinArrayBitmapExtension, TAddress>;
export function decodeBinArrayBitmapExtension<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<BinArrayBitmapExtension, TAddress>
  | MaybeAccount<BinArrayBitmapExtension, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBinArrayBitmapExtensionDecoder()
  );
}

export async function fetchBinArrayBitmapExtension<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BinArrayBitmapExtension, TAddress>> {
  const maybeAccount = await fetchMaybeBinArrayBitmapExtension(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBinArrayBitmapExtension<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BinArrayBitmapExtension, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBinArrayBitmapExtension(maybeAccount);
}

export async function fetchAllBinArrayBitmapExtension(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BinArrayBitmapExtension>[]> {
  const maybeAccounts = await fetchAllMaybeBinArrayBitmapExtension(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBinArrayBitmapExtension(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BinArrayBitmapExtension>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeBinArrayBitmapExtension(maybeAccount)
  );
}

export function getBinArrayBitmapExtensionSize(): number {
  return 1576;
}
