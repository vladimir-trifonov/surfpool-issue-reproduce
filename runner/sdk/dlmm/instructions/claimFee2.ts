/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CLAIM_FEE2_DISCRIMINATOR = new Uint8Array([
  112, 191, 101, 171, 28, 144, 127, 187,
]);

export function getClaimFee2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_FEE2_DISCRIMINATOR);
}

export type ClaimFee2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountUserTokenX extends string | AccountMeta<string> = string,
  TAccountUserTokenY extends string | AccountMeta<string> = string,
  TAccountTokenXMint extends string | AccountMeta<string> = string,
  TAccountTokenYMint extends string | AccountMeta<string> = string,
  TAccountTokenProgramX extends string | AccountMeta<string> = string,
  TAccountTokenProgramY extends string | AccountMeta<string> = string,
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountUserTokenX extends string
        ? WritableAccount<TAccountUserTokenX>
        : TAccountUserTokenX,
      TAccountUserTokenY extends string
        ? WritableAccount<TAccountUserTokenY>
        : TAccountUserTokenY,
      TAccountTokenXMint extends string
        ? ReadonlyAccount<TAccountTokenXMint>
        : TAccountTokenXMint,
      TAccountTokenYMint extends string
        ? ReadonlyAccount<TAccountTokenYMint>
        : TAccountTokenYMint,
      TAccountTokenProgramX extends string
        ? ReadonlyAccount<TAccountTokenProgramX>
        : TAccountTokenProgramX,
      TAccountTokenProgramY extends string
        ? ReadonlyAccount<TAccountTokenProgramY>
        : TAccountTokenProgramY,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimFee2InstructionData = {
  discriminator: ReadonlyUint8Array;
  minBinId: number;
  maxBinId: number;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type ClaimFee2InstructionDataArgs = {
  minBinId: number;
  maxBinId: number;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getClaimFee2InstructionDataEncoder(): Encoder<ClaimFee2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['minBinId', getI32Encoder()],
      ['maxBinId', getI32Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_FEE2_DISCRIMINATOR })
  );
}

export function getClaimFee2InstructionDataDecoder(): Decoder<ClaimFee2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['minBinId', getI32Decoder()],
    ['maxBinId', getI32Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getClaimFee2InstructionDataCodec(): Codec<
  ClaimFee2InstructionDataArgs,
  ClaimFee2InstructionData
> {
  return combineCodec(
    getClaimFee2InstructionDataEncoder(),
    getClaimFee2InstructionDataDecoder()
  );
}

export type ClaimFee2Input<
  TAccountLbPair extends string = string,
  TAccountPosition extends string = string,
  TAccountSender extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountTokenProgramX extends string = string,
  TAccountTokenProgramY extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  position: Address<TAccountPosition>;
  sender: TransactionSigner<TAccountSender>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  userTokenX: Address<TAccountUserTokenX>;
  userTokenY: Address<TAccountUserTokenY>;
  tokenXMint: Address<TAccountTokenXMint>;
  tokenYMint: Address<TAccountTokenYMint>;
  tokenProgramX: Address<TAccountTokenProgramX>;
  tokenProgramY: Address<TAccountTokenProgramY>;
  memoProgram: Address<TAccountMemoProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  minBinId: ClaimFee2InstructionDataArgs['minBinId'];
  maxBinId: ClaimFee2InstructionDataArgs['maxBinId'];
  remainingAccountsInfo: ClaimFee2InstructionDataArgs['remainingAccountsInfo'];
};

export function getClaimFee2Instruction<
  TAccountLbPair extends string,
  TAccountPosition extends string,
  TAccountSender extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountUserTokenX extends string,
  TAccountUserTokenY extends string,
  TAccountTokenXMint extends string,
  TAccountTokenYMint extends string,
  TAccountTokenProgramX extends string,
  TAccountTokenProgramY extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: ClaimFee2Input<
    TAccountLbPair,
    TAccountPosition,
    TAccountSender,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimFee2Instruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountPosition,
  TAccountSender,
  TAccountReserveX,
  TAccountReserveY,
  TAccountUserTokenX,
  TAccountUserTokenY,
  TAccountTokenXMint,
  TAccountTokenYMint,
  TAccountTokenProgramX,
  TAccountTokenProgramY,
  TAccountMemoProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    userTokenX: { value: input.userTokenX ?? null, isWritable: true },
    userTokenY: { value: input.userTokenY ?? null, isWritable: true },
    tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
    tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
    tokenProgramX: { value: input.tokenProgramX ?? null, isWritable: false },
    tokenProgramY: { value: input.tokenProgramY ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.userTokenX),
      getAccountMeta(accounts.userTokenY),
      getAccountMeta(accounts.tokenXMint),
      getAccountMeta(accounts.tokenYMint),
      getAccountMeta(accounts.tokenProgramX),
      getAccountMeta(accounts.tokenProgramY),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimFee2InstructionDataEncoder().encode(
      args as ClaimFee2InstructionDataArgs
    ),
    programAddress,
  } as ClaimFee2Instruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountPosition,
    TAccountSender,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedClaimFee2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    position: TAccountMetas[1];
    sender: TAccountMetas[2];
    reserveX: TAccountMetas[3];
    reserveY: TAccountMetas[4];
    userTokenX: TAccountMetas[5];
    userTokenY: TAccountMetas[6];
    tokenXMint: TAccountMetas[7];
    tokenYMint: TAccountMetas[8];
    tokenProgramX: TAccountMetas[9];
    tokenProgramY: TAccountMetas[10];
    memoProgram: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: ClaimFee2InstructionData;
};

export function parseClaimFee2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimFee2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      position: getNextAccount(),
      sender: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      userTokenX: getNextAccount(),
      userTokenY: getNextAccount(),
      tokenXMint: getNextAccount(),
      tokenYMint: getNextAccount(),
      tokenProgramX: getNextAccount(),
      tokenProgramY: getNextAccount(),
      memoProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimFee2InstructionDataDecoder().decode(instruction.data),
  };
}
