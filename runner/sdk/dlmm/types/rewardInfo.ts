/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/** Stores the state relevant for tracking liquidity mining rewards */
export type RewardInfo = {
  /** Reward token mint. */
  mint: Address;
  /** Reward vault token account. */
  vault: Address;
  /** Authority account that allows to fund rewards */
  funder: Address;
  /** TODO check whether we need to store it in pool */
  rewardDuration: bigint;
  /** TODO check whether we need to store it in pool */
  rewardDurationEnd: bigint;
  /** TODO check whether we need to store it in pool */
  rewardRate: bigint;
  /** The last time reward states were updated. */
  lastUpdateTime: bigint;
  /** Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window. */
  cumulativeSecondsWithEmptyLiquidityReward: bigint;
};

export type RewardInfoArgs = {
  /** Reward token mint. */
  mint: Address;
  /** Reward vault token account. */
  vault: Address;
  /** Authority account that allows to fund rewards */
  funder: Address;
  /** TODO check whether we need to store it in pool */
  rewardDuration: number | bigint;
  /** TODO check whether we need to store it in pool */
  rewardDurationEnd: number | bigint;
  /** TODO check whether we need to store it in pool */
  rewardRate: number | bigint;
  /** The last time reward states were updated. */
  lastUpdateTime: number | bigint;
  /** Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window. */
  cumulativeSecondsWithEmptyLiquidityReward: number | bigint;
};

export function getRewardInfoEncoder(): FixedSizeEncoder<RewardInfoArgs> {
  return getStructEncoder([
    ['mint', getAddressEncoder()],
    ['vault', getAddressEncoder()],
    ['funder', getAddressEncoder()],
    ['rewardDuration', getU64Encoder()],
    ['rewardDurationEnd', getU64Encoder()],
    ['rewardRate', getU128Encoder()],
    ['lastUpdateTime', getU64Encoder()],
    ['cumulativeSecondsWithEmptyLiquidityReward', getU64Encoder()],
  ]);
}

export function getRewardInfoDecoder(): FixedSizeDecoder<RewardInfo> {
  return getStructDecoder([
    ['mint', getAddressDecoder()],
    ['vault', getAddressDecoder()],
    ['funder', getAddressDecoder()],
    ['rewardDuration', getU64Decoder()],
    ['rewardDurationEnd', getU64Decoder()],
    ['rewardRate', getU128Decoder()],
    ['lastUpdateTime', getU64Decoder()],
    ['cumulativeSecondsWithEmptyLiquidityReward', getU64Decoder()],
  ]);
}

export function getRewardInfoCodec(): FixedSizeCodec<
  RewardInfoArgs,
  RewardInfo
> {
  return combineCodec(getRewardInfoEncoder(), getRewardInfoDecoder());
}
