/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_CP_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_PROTOCOL_FEE_DISCRIMINATOR = new Uint8Array([
  136, 136, 252, 221, 194, 66, 126, 89,
]);

export function getCollectProtocolFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_PROTOCOL_FEE_DISCRIMINATOR
  );
}

export type CollectProtocolFeeInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountAmmConfig extends string | AccountMeta<string> = string,
  TAccountToken0Vault extends string | AccountMeta<string> = string,
  TAccountToken1Vault extends string | AccountMeta<string> = string,
  TAccountVault0Mint extends string | AccountMeta<string> = string,
  TAccountVault1Mint extends string | AccountMeta<string> = string,
  TAccountRecipientToken0Account extends string | AccountMeta<string> = string,
  TAccountRecipientToken1Account extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenProgram2022 extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountAmmConfig extends string
        ? ReadonlyAccount<TAccountAmmConfig>
        : TAccountAmmConfig,
      TAccountToken0Vault extends string
        ? WritableAccount<TAccountToken0Vault>
        : TAccountToken0Vault,
      TAccountToken1Vault extends string
        ? WritableAccount<TAccountToken1Vault>
        : TAccountToken1Vault,
      TAccountVault0Mint extends string
        ? ReadonlyAccount<TAccountVault0Mint>
        : TAccountVault0Mint,
      TAccountVault1Mint extends string
        ? ReadonlyAccount<TAccountVault1Mint>
        : TAccountVault1Mint,
      TAccountRecipientToken0Account extends string
        ? WritableAccount<TAccountRecipientToken0Account>
        : TAccountRecipientToken0Account,
      TAccountRecipientToken1Account extends string
        ? WritableAccount<TAccountRecipientToken1Account>
        : TAccountRecipientToken1Account,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      ...TRemainingAccounts,
    ]
  >;

export type CollectProtocolFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount0Requested: bigint;
  amount1Requested: bigint;
};

export type CollectProtocolFeeInstructionDataArgs = {
  amount0Requested: number | bigint;
  amount1Requested: number | bigint;
};

export function getCollectProtocolFeeInstructionDataEncoder(): FixedSizeEncoder<CollectProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount0Requested', getU64Encoder()],
      ['amount1Requested', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_PROTOCOL_FEE_DISCRIMINATOR })
  );
}

export function getCollectProtocolFeeInstructionDataDecoder(): FixedSizeDecoder<CollectProtocolFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount0Requested', getU64Decoder()],
    ['amount1Requested', getU64Decoder()],
  ]);
}

export function getCollectProtocolFeeInstructionDataCodec(): FixedSizeCodec<
  CollectProtocolFeeInstructionDataArgs,
  CollectProtocolFeeInstructionData
> {
  return combineCodec(
    getCollectProtocolFeeInstructionDataEncoder(),
    getCollectProtocolFeeInstructionDataDecoder()
  );
}

export type CollectProtocolFeeInput<
  TAccountOwner extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountToken0Vault extends string = string,
  TAccountToken1Vault extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
  TAccountRecipientToken0Account extends string = string,
  TAccountRecipientToken1Account extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
> = {
  /** Only admin or owner can collect fee now */
  owner: TransactionSigner<TAccountOwner>;
  authority: Address<TAccountAuthority>;
  /** Pool state stores accumulated protocol fee amount */
  poolState: Address<TAccountPoolState>;
  /** Amm config account stores owner */
  ammConfig: Address<TAccountAmmConfig>;
  /** The address that holds pool tokens for token_0 */
  token0Vault: Address<TAccountToken0Vault>;
  /** The address that holds pool tokens for token_1 */
  token1Vault: Address<TAccountToken1Vault>;
  /** The mint of token_0 vault */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token_1 vault */
  vault1Mint: Address<TAccountVault1Mint>;
  /** The address that receives the collected token_0 protocol fees */
  recipientToken0Account: Address<TAccountRecipientToken0Account>;
  /** The address that receives the collected token_1 protocol fees */
  recipientToken1Account: Address<TAccountRecipientToken1Account>;
  /** The SPL program to perform token transfers */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** The SPL program 2022 to perform token transfers */
  tokenProgram2022: Address<TAccountTokenProgram2022>;
  amount0Requested: CollectProtocolFeeInstructionDataArgs['amount0Requested'];
  amount1Requested: CollectProtocolFeeInstructionDataArgs['amount1Requested'];
};

export function getCollectProtocolFeeInstruction<
  TAccountOwner extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountAmmConfig extends string,
  TAccountToken0Vault extends string,
  TAccountToken1Vault extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TAccountRecipientToken0Account extends string,
  TAccountRecipientToken1Account extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TProgramAddress extends Address = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
>(
  input: CollectProtocolFeeInput<
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountAmmConfig,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRecipientToken0Account,
    TAccountRecipientToken1Account,
    TAccountTokenProgram,
    TAccountTokenProgram2022
  >,
  config?: { programAddress?: TProgramAddress }
): CollectProtocolFeeInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountAuthority,
  TAccountPoolState,
  TAccountAmmConfig,
  TAccountToken0Vault,
  TAccountToken1Vault,
  TAccountVault0Mint,
  TAccountVault1Mint,
  TAccountRecipientToken0Account,
  TAccountRecipientToken1Account,
  TAccountTokenProgram,
  TAccountTokenProgram2022
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_CP_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    token0Vault: { value: input.token0Vault ?? null, isWritable: true },
    token1Vault: { value: input.token1Vault ?? null, isWritable: true },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: false },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: false },
    recipientToken0Account: {
      value: input.recipientToken0Account ?? null,
      isWritable: true,
    },
    recipientToken1Account: {
      value: input.recipientToken1Account ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.token0Vault),
      getAccountMeta(accounts.token1Vault),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
      getAccountMeta(accounts.recipientToken0Account),
      getAccountMeta(accounts.recipientToken1Account),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
    ],
    data: getCollectProtocolFeeInstructionDataEncoder().encode(
      args as CollectProtocolFeeInstructionDataArgs
    ),
    programAddress,
  } as CollectProtocolFeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountAmmConfig,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRecipientToken0Account,
    TAccountRecipientToken1Account,
    TAccountTokenProgram,
    TAccountTokenProgram2022
  >);
}

export type ParsedCollectProtocolFeeInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Only admin or owner can collect fee now */
    owner: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** Pool state stores accumulated protocol fee amount */
    poolState: TAccountMetas[2];
    /** Amm config account stores owner */
    ammConfig: TAccountMetas[3];
    /** The address that holds pool tokens for token_0 */
    token0Vault: TAccountMetas[4];
    /** The address that holds pool tokens for token_1 */
    token1Vault: TAccountMetas[5];
    /** The mint of token_0 vault */
    vault0Mint: TAccountMetas[6];
    /** The mint of token_1 vault */
    vault1Mint: TAccountMetas[7];
    /** The address that receives the collected token_0 protocol fees */
    recipientToken0Account: TAccountMetas[8];
    /** The address that receives the collected token_1 protocol fees */
    recipientToken1Account: TAccountMetas[9];
    /** The SPL program to perform token transfers */
    tokenProgram: TAccountMetas[10];
    /** The SPL program 2022 to perform token transfers */
    tokenProgram2022: TAccountMetas[11];
  };
  data: CollectProtocolFeeInstructionData;
};

export function parseCollectProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      ammConfig: getNextAccount(),
      token0Vault: getNextAccount(),
      token1Vault: getNextAccount(),
      vault0Mint: getNextAccount(),
      vault1Mint: getNextAccount(),
      recipientToken0Account: getNextAccount(),
      recipientToken1Account: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
    },
    data: getCollectProtocolFeeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
