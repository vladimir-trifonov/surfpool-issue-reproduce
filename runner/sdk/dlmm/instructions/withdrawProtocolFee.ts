/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR = new Uint8Array([
  158, 201, 158, 189, 33, 93, 162, 103,
]);

export function getWithdrawProtocolFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR
  );
}

export type WithdrawProtocolFeeInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountTokenXMint extends string | AccountMeta<string> = string,
  TAccountTokenYMint extends string | AccountMeta<string> = string,
  TAccountReceiverTokenX extends string | AccountMeta<string> = string,
  TAccountReceiverTokenY extends string | AccountMeta<string> = string,
  TAccountClaimFeeOperator extends string | AccountMeta<string> = string,
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountTokenXProgram extends string | AccountMeta<string> = string,
  TAccountTokenYProgram extends string | AccountMeta<string> = string,
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountTokenXMint extends string
        ? ReadonlyAccount<TAccountTokenXMint>
        : TAccountTokenXMint,
      TAccountTokenYMint extends string
        ? ReadonlyAccount<TAccountTokenYMint>
        : TAccountTokenYMint,
      TAccountReceiverTokenX extends string
        ? WritableAccount<TAccountReceiverTokenX>
        : TAccountReceiverTokenX,
      TAccountReceiverTokenY extends string
        ? WritableAccount<TAccountReceiverTokenY>
        : TAccountReceiverTokenY,
      TAccountClaimFeeOperator extends string
        ? ReadonlyAccount<TAccountClaimFeeOperator>
        : TAccountClaimFeeOperator,
      TAccountOperator extends string
        ? ReadonlySignerAccount<TAccountOperator> &
            AccountSignerMeta<TAccountOperator>
        : TAccountOperator,
      TAccountTokenXProgram extends string
        ? ReadonlyAccount<TAccountTokenXProgram>
        : TAccountTokenXProgram,
      TAccountTokenYProgram extends string
        ? ReadonlyAccount<TAccountTokenYProgram>
        : TAccountTokenYProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawProtocolFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountX: bigint;
  amountY: bigint;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type WithdrawProtocolFeeInstructionDataArgs = {
  amountX: number | bigint;
  amountY: number | bigint;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getWithdrawProtocolFeeInstructionDataEncoder(): Encoder<WithdrawProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountX', getU64Encoder()],
      ['amountY', getU64Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_PROTOCOL_FEE_DISCRIMINATOR,
    })
  );
}

export function getWithdrawProtocolFeeInstructionDataDecoder(): Decoder<WithdrawProtocolFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountX', getU64Decoder()],
    ['amountY', getU64Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getWithdrawProtocolFeeInstructionDataCodec(): Codec<
  WithdrawProtocolFeeInstructionDataArgs,
  WithdrawProtocolFeeInstructionData
> {
  return combineCodec(
    getWithdrawProtocolFeeInstructionDataEncoder(),
    getWithdrawProtocolFeeInstructionDataDecoder()
  );
}

export type WithdrawProtocolFeeInput<
  TAccountLbPair extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountReceiverTokenX extends string = string,
  TAccountReceiverTokenY extends string = string,
  TAccountClaimFeeOperator extends string = string,
  TAccountOperator extends string = string,
  TAccountTokenXProgram extends string = string,
  TAccountTokenYProgram extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  tokenXMint: Address<TAccountTokenXMint>;
  tokenYMint: Address<TAccountTokenYMint>;
  receiverTokenX: Address<TAccountReceiverTokenX>;
  receiverTokenY: Address<TAccountReceiverTokenY>;
  claimFeeOperator: Address<TAccountClaimFeeOperator>;
  /** operator */
  operator: TransactionSigner<TAccountOperator>;
  tokenXProgram: Address<TAccountTokenXProgram>;
  tokenYProgram: Address<TAccountTokenYProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  amountX: WithdrawProtocolFeeInstructionDataArgs['amountX'];
  amountY: WithdrawProtocolFeeInstructionDataArgs['amountY'];
  remainingAccountsInfo: WithdrawProtocolFeeInstructionDataArgs['remainingAccountsInfo'];
};

export function getWithdrawProtocolFeeInstruction<
  TAccountLbPair extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountTokenXMint extends string,
  TAccountTokenYMint extends string,
  TAccountReceiverTokenX extends string,
  TAccountReceiverTokenY extends string,
  TAccountClaimFeeOperator extends string,
  TAccountOperator extends string,
  TAccountTokenXProgram extends string,
  TAccountTokenYProgram extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: WithdrawProtocolFeeInput<
    TAccountLbPair,
    TAccountReserveX,
    TAccountReserveY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountReceiverTokenX,
    TAccountReceiverTokenY,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawProtocolFeeInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountReserveX,
  TAccountReserveY,
  TAccountTokenXMint,
  TAccountTokenYMint,
  TAccountReceiverTokenX,
  TAccountReceiverTokenY,
  TAccountClaimFeeOperator,
  TAccountOperator,
  TAccountTokenXProgram,
  TAccountTokenYProgram,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
    tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
    receiverTokenX: { value: input.receiverTokenX ?? null, isWritable: true },
    receiverTokenY: { value: input.receiverTokenY ?? null, isWritable: true },
    claimFeeOperator: {
      value: input.claimFeeOperator ?? null,
      isWritable: false,
    },
    operator: { value: input.operator ?? null, isWritable: false },
    tokenXProgram: { value: input.tokenXProgram ?? null, isWritable: false },
    tokenYProgram: { value: input.tokenYProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.tokenXMint),
      getAccountMeta(accounts.tokenYMint),
      getAccountMeta(accounts.receiverTokenX),
      getAccountMeta(accounts.receiverTokenY),
      getAccountMeta(accounts.claimFeeOperator),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.tokenXProgram),
      getAccountMeta(accounts.tokenYProgram),
      getAccountMeta(accounts.memoProgram),
    ],
    data: getWithdrawProtocolFeeInstructionDataEncoder().encode(
      args as WithdrawProtocolFeeInstructionDataArgs
    ),
    programAddress,
  } as WithdrawProtocolFeeInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountReserveX,
    TAccountReserveY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountReceiverTokenX,
    TAccountReceiverTokenY,
    TAccountClaimFeeOperator,
    TAccountOperator,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountMemoProgram
  >);
}

export type ParsedWithdrawProtocolFeeInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    reserveX: TAccountMetas[1];
    reserveY: TAccountMetas[2];
    tokenXMint: TAccountMetas[3];
    tokenYMint: TAccountMetas[4];
    receiverTokenX: TAccountMetas[5];
    receiverTokenY: TAccountMetas[6];
    claimFeeOperator: TAccountMetas[7];
    /** operator */
    operator: TAccountMetas[8];
    tokenXProgram: TAccountMetas[9];
    tokenYProgram: TAccountMetas[10];
    memoProgram: TAccountMetas[11];
  };
  data: WithdrawProtocolFeeInstructionData;
};

export function parseWithdrawProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      tokenXMint: getNextAccount(),
      tokenYMint: getNextAccount(),
      receiverTokenX: getNextAccount(),
      receiverTokenY: getNextAccount(),
      claimFeeOperator: getNextAccount(),
      operator: getNextAccount(),
      tokenXProgram: getNextAccount(),
      tokenYProgram: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getWithdrawProtocolFeeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
