/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/** The element of observations in ObservationState */
export type Observation = {
  /** The block timestamp of the observation */
  blockTimestamp: bigint;
  /** the cumulative of token0 price during the duration time, Q32.32, the remaining 64 bit for overflow */
  cumulativeToken0PriceX32: bigint;
  /** the cumulative of token1 price during the duration time, Q32.32, the remaining 64 bit for overflow */
  cumulativeToken1PriceX32: bigint;
};

export type ObservationArgs = {
  /** The block timestamp of the observation */
  blockTimestamp: number | bigint;
  /** the cumulative of token0 price during the duration time, Q32.32, the remaining 64 bit for overflow */
  cumulativeToken0PriceX32: number | bigint;
  /** the cumulative of token1 price during the duration time, Q32.32, the remaining 64 bit for overflow */
  cumulativeToken1PriceX32: number | bigint;
};

export function getObservationEncoder(): FixedSizeEncoder<ObservationArgs> {
  return getStructEncoder([
    ['blockTimestamp', getU64Encoder()],
    ['cumulativeToken0PriceX32', getU128Encoder()],
    ['cumulativeToken1PriceX32', getU128Encoder()],
  ]);
}

export function getObservationDecoder(): FixedSizeDecoder<Observation> {
  return getStructDecoder([
    ['blockTimestamp', getU64Decoder()],
    ['cumulativeToken0PriceX32', getU128Decoder()],
    ['cumulativeToken1PriceX32', getU128Decoder()],
  ]);
}

export function getObservationCodec(): FixedSizeCodec<
  ObservationArgs,
  Observation
> {
  return combineCodec(getObservationEncoder(), getObservationDecoder());
}
