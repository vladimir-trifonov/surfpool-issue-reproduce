/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const WITHDRAW_INELIGIBLE_REWARD_DISCRIMINATOR = new Uint8Array([
  148, 206, 42, 195, 247, 49, 103, 8,
]);

export function getWithdrawIneligibleRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_INELIGIBLE_REWARD_DISCRIMINATOR
  );
}

export type WithdrawIneligibleRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountFunderTokenAccount extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountBinArray extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountFunderTokenAccount extends string
        ? WritableAccount<TAccountFunderTokenAccount>
        : TAccountFunderTokenAccount,
      TAccountFunder extends string
        ? ReadonlySignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountBinArray extends string
        ? WritableAccount<TAccountBinArray>
        : TAccountBinArray,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawIneligibleRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type WithdrawIneligibleRewardInstructionDataArgs = {
  rewardIndex: number | bigint;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getWithdrawIneligibleRewardInstructionDataEncoder(): Encoder<WithdrawIneligibleRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU64Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_INELIGIBLE_REWARD_DISCRIMINATOR,
    })
  );
}

export function getWithdrawIneligibleRewardInstructionDataDecoder(): Decoder<WithdrawIneligibleRewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU64Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getWithdrawIneligibleRewardInstructionDataCodec(): Codec<
  WithdrawIneligibleRewardInstructionDataArgs,
  WithdrawIneligibleRewardInstructionData
> {
  return combineCodec(
    getWithdrawIneligibleRewardInstructionDataEncoder(),
    getWithdrawIneligibleRewardInstructionDataDecoder()
  );
}

export type WithdrawIneligibleRewardInput<
  TAccountLbPair extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountFunderTokenAccount extends string = string,
  TAccountFunder extends string = string,
  TAccountBinArray extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  funderTokenAccount: Address<TAccountFunderTokenAccount>;
  funder: TransactionSigner<TAccountFunder>;
  binArray: Address<TAccountBinArray>;
  tokenProgram?: Address<TAccountTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: WithdrawIneligibleRewardInstructionDataArgs['rewardIndex'];
  remainingAccountsInfo: WithdrawIneligibleRewardInstructionDataArgs['remainingAccountsInfo'];
};

export function getWithdrawIneligibleRewardInstruction<
  TAccountLbPair extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountFunderTokenAccount extends string,
  TAccountFunder extends string,
  TAccountBinArray extends string,
  TAccountTokenProgram extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: WithdrawIneligibleRewardInput<
    TAccountLbPair,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountFunderTokenAccount,
    TAccountFunder,
    TAccountBinArray,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawIneligibleRewardInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountRewardVault,
  TAccountRewardMint,
  TAccountFunderTokenAccount,
  TAccountFunder,
  TAccountBinArray,
  TAccountTokenProgram,
  TAccountMemoProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    funderTokenAccount: {
      value: input.funderTokenAccount ?? null,
      isWritable: true,
    },
    funder: { value: input.funder ?? null, isWritable: false },
    binArray: { value: input.binArray ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.funderTokenAccount),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.binArray),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getWithdrawIneligibleRewardInstructionDataEncoder().encode(
      args as WithdrawIneligibleRewardInstructionDataArgs
    ),
    programAddress,
  } as WithdrawIneligibleRewardInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountFunderTokenAccount,
    TAccountFunder,
    TAccountBinArray,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedWithdrawIneligibleRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    rewardVault: TAccountMetas[1];
    rewardMint: TAccountMetas[2];
    funderTokenAccount: TAccountMetas[3];
    funder: TAccountMetas[4];
    binArray: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    memoProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: WithdrawIneligibleRewardInstructionData;
};

export function parseWithdrawIneligibleRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawIneligibleRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardMint: getNextAccount(),
      funderTokenAccount: getNextAccount(),
      funder: getNextAccount(),
      binArray: getNextAccount(),
      tokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getWithdrawIneligibleRewardInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
