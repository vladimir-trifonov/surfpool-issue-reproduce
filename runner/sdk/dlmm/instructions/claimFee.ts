/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_FEE_DISCRIMINATOR = new Uint8Array([
  169, 32, 79, 137, 136, 232, 70, 137,
]);

export function getClaimFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_FEE_DISCRIMINATOR);
}

export type ClaimFeeInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountBinArrayLower extends string | AccountMeta<string> = string,
  TAccountBinArrayUpper extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountUserTokenX extends string | AccountMeta<string> = string,
  TAccountUserTokenY extends string | AccountMeta<string> = string,
  TAccountTokenXMint extends string | AccountMeta<string> = string,
  TAccountTokenYMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountBinArrayLower extends string
        ? WritableAccount<TAccountBinArrayLower>
        : TAccountBinArrayLower,
      TAccountBinArrayUpper extends string
        ? WritableAccount<TAccountBinArrayUpper>
        : TAccountBinArrayUpper,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountUserTokenX extends string
        ? WritableAccount<TAccountUserTokenX>
        : TAccountUserTokenX,
      TAccountUserTokenY extends string
        ? WritableAccount<TAccountUserTokenY>
        : TAccountUserTokenY,
      TAccountTokenXMint extends string
        ? ReadonlyAccount<TAccountTokenXMint>
        : TAccountTokenXMint,
      TAccountTokenYMint extends string
        ? ReadonlyAccount<TAccountTokenYMint>
        : TAccountTokenYMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimFeeInstructionData = { discriminator: ReadonlyUint8Array };

export type ClaimFeeInstructionDataArgs = {};

export function getClaimFeeInstructionDataEncoder(): FixedSizeEncoder<ClaimFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_FEE_DISCRIMINATOR })
  );
}

export function getClaimFeeInstructionDataDecoder(): FixedSizeDecoder<ClaimFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimFeeInstructionDataCodec(): FixedSizeCodec<
  ClaimFeeInstructionDataArgs,
  ClaimFeeInstructionData
> {
  return combineCodec(
    getClaimFeeInstructionDataEncoder(),
    getClaimFeeInstructionDataDecoder()
  );
}

export type ClaimFeeInput<
  TAccountLbPair extends string = string,
  TAccountPosition extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountSender extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  position: Address<TAccountPosition>;
  binArrayLower: Address<TAccountBinArrayLower>;
  binArrayUpper: Address<TAccountBinArrayUpper>;
  sender: TransactionSigner<TAccountSender>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  userTokenX: Address<TAccountUserTokenX>;
  userTokenY: Address<TAccountUserTokenY>;
  tokenXMint: Address<TAccountTokenXMint>;
  tokenYMint: Address<TAccountTokenYMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getClaimFeeInstruction<
  TAccountLbPair extends string,
  TAccountPosition extends string,
  TAccountBinArrayLower extends string,
  TAccountBinArrayUpper extends string,
  TAccountSender extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountUserTokenX extends string,
  TAccountUserTokenY extends string,
  TAccountTokenXMint extends string,
  TAccountTokenYMint extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: ClaimFeeInput<
    TAccountLbPair,
    TAccountPosition,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimFeeInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountPosition,
  TAccountBinArrayLower,
  TAccountBinArrayUpper,
  TAccountSender,
  TAccountReserveX,
  TAccountReserveY,
  TAccountUserTokenX,
  TAccountUserTokenY,
  TAccountTokenXMint,
  TAccountTokenYMint,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
    binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    userTokenX: { value: input.userTokenX ?? null, isWritable: true },
    userTokenY: { value: input.userTokenY ?? null, isWritable: true },
    tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
    tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.binArrayLower),
      getAccountMeta(accounts.binArrayUpper),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.userTokenX),
      getAccountMeta(accounts.userTokenY),
      getAccountMeta(accounts.tokenXMint),
      getAccountMeta(accounts.tokenYMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimFeeInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimFeeInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountPosition,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedClaimFeeInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    position: TAccountMetas[1];
    binArrayLower: TAccountMetas[2];
    binArrayUpper: TAccountMetas[3];
    sender: TAccountMetas[4];
    reserveX: TAccountMetas[5];
    reserveY: TAccountMetas[6];
    userTokenX: TAccountMetas[7];
    userTokenY: TAccountMetas[8];
    tokenXMint: TAccountMetas[9];
    tokenYMint: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: ClaimFeeInstructionData;
};

export function parseClaimFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      position: getNextAccount(),
      binArrayLower: getNextAccount(),
      binArrayUpper: getNextAccount(),
      sender: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      userTokenX: getNextAccount(),
      userTokenY: getNextAccount(),
      tokenXMint: getNextAccount(),
      tokenYMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimFeeInstructionDataDecoder().decode(instruction.data),
  };
}
