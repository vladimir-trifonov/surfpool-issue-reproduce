/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_DISCRIMINATOR = new Uint8Array([
  8, 41, 87, 35, 80, 48, 121, 26,
]);

export function getCloseClaimProtocolFeeOperatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_DISCRIMINATOR
  );
}

export type CloseClaimProtocolFeeOperatorInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountClaimFeeOperator extends string | AccountMeta<string> = string,
  TAccountRentReceiver extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountClaimFeeOperator extends string
        ? WritableAccount<TAccountClaimFeeOperator>
        : TAccountClaimFeeOperator,
      TAccountRentReceiver extends string
        ? WritableAccount<TAccountRentReceiver>
        : TAccountRentReceiver,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type CloseClaimProtocolFeeOperatorInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseClaimProtocolFeeOperatorInstructionDataArgs = {};

export function getCloseClaimProtocolFeeOperatorInstructionDataEncoder(): FixedSizeEncoder<CloseClaimProtocolFeeOperatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_CLAIM_PROTOCOL_FEE_OPERATOR_DISCRIMINATOR,
    })
  );
}

export function getCloseClaimProtocolFeeOperatorInstructionDataDecoder(): FixedSizeDecoder<CloseClaimProtocolFeeOperatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseClaimProtocolFeeOperatorInstructionDataCodec(): FixedSizeCodec<
  CloseClaimProtocolFeeOperatorInstructionDataArgs,
  CloseClaimProtocolFeeOperatorInstructionData
> {
  return combineCodec(
    getCloseClaimProtocolFeeOperatorInstructionDataEncoder(),
    getCloseClaimProtocolFeeOperatorInstructionDataDecoder()
  );
}

export type CloseClaimProtocolFeeOperatorInput<
  TAccountClaimFeeOperator extends string = string,
  TAccountRentReceiver extends string = string,
  TAccountAdmin extends string = string,
> = {
  claimFeeOperator: Address<TAccountClaimFeeOperator>;
  rentReceiver: Address<TAccountRentReceiver>;
  admin: TransactionSigner<TAccountAdmin>;
};

export function getCloseClaimProtocolFeeOperatorInstruction<
  TAccountClaimFeeOperator extends string,
  TAccountRentReceiver extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: CloseClaimProtocolFeeOperatorInput<
    TAccountClaimFeeOperator,
    TAccountRentReceiver,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): CloseClaimProtocolFeeOperatorInstruction<
  TProgramAddress,
  TAccountClaimFeeOperator,
  TAccountRentReceiver,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    claimFeeOperator: {
      value: input.claimFeeOperator ?? null,
      isWritable: true,
    },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.claimFeeOperator),
      getAccountMeta(accounts.rentReceiver),
      getAccountMeta(accounts.admin),
    ],
    data: getCloseClaimProtocolFeeOperatorInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseClaimProtocolFeeOperatorInstruction<
    TProgramAddress,
    TAccountClaimFeeOperator,
    TAccountRentReceiver,
    TAccountAdmin
  >);
}

export type ParsedCloseClaimProtocolFeeOperatorInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    claimFeeOperator: TAccountMetas[0];
    rentReceiver: TAccountMetas[1];
    admin: TAccountMetas[2];
  };
  data: CloseClaimProtocolFeeOperatorInstructionData;
};

export function parseCloseClaimProtocolFeeOperatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseClaimProtocolFeeOperatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      claimFeeOperator: getNextAccount(),
      rentReceiver: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getCloseClaimProtocolFeeOperatorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
