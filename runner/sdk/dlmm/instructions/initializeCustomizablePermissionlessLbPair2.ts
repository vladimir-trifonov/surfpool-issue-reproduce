/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCustomizableParamsDecoder,
  getCustomizableParamsEncoder,
  type CustomizableParams,
  type CustomizableParamsArgs,
} from '../types';

export const INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR2_DISCRIMINATOR =
  new Uint8Array([243, 73, 129, 126, 51, 19, 241, 107]);

export function getInitializeCustomizablePermissionlessLbPair2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR2_DISCRIMINATOR
  );
}

export type InitializeCustomizablePermissionlessLbPair2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountTokenMintX extends string | AccountMeta<string> = string,
  TAccountTokenMintY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountUserTokenX extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountTokenBadgeX extends string | AccountMeta<string> = string,
  TAccountTokenBadgeY extends string | AccountMeta<string> = string,
  TAccountTokenProgramX extends string | AccountMeta<string> = string,
  TAccountTokenProgramY extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountUserTokenY extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountTokenMintX extends string
        ? ReadonlyAccount<TAccountTokenMintX>
        : TAccountTokenMintX,
      TAccountTokenMintY extends string
        ? ReadonlyAccount<TAccountTokenMintY>
        : TAccountTokenMintY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountUserTokenX extends string
        ? ReadonlyAccount<TAccountUserTokenX>
        : TAccountUserTokenX,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenBadgeX extends string
        ? ReadonlyAccount<TAccountTokenBadgeX>
        : TAccountTokenBadgeX,
      TAccountTokenBadgeY extends string
        ? ReadonlyAccount<TAccountTokenBadgeY>
        : TAccountTokenBadgeY,
      TAccountTokenProgramX extends string
        ? ReadonlyAccount<TAccountTokenProgramX>
        : TAccountTokenProgramX,
      TAccountTokenProgramY extends string
        ? ReadonlyAccount<TAccountTokenProgramY>
        : TAccountTokenProgramY,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountUserTokenY extends string
        ? ReadonlyAccount<TAccountUserTokenY>
        : TAccountUserTokenY,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCustomizablePermissionlessLbPair2InstructionData = {
  discriminator: ReadonlyUint8Array;
  params: CustomizableParams;
};

export type InitializeCustomizablePermissionlessLbPair2InstructionDataArgs = {
  params: CustomizableParamsArgs;
};

export function getInitializeCustomizablePermissionlessLbPair2InstructionDataEncoder(): Encoder<InitializeCustomizablePermissionlessLbPair2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getCustomizableParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR2_DISCRIMINATOR,
    })
  );
}

export function getInitializeCustomizablePermissionlessLbPair2InstructionDataDecoder(): Decoder<InitializeCustomizablePermissionlessLbPair2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getCustomizableParamsDecoder()],
  ]);
}

export function getInitializeCustomizablePermissionlessLbPair2InstructionDataCodec(): Codec<
  InitializeCustomizablePermissionlessLbPair2InstructionDataArgs,
  InitializeCustomizablePermissionlessLbPair2InstructionData
> {
  return combineCodec(
    getInitializeCustomizablePermissionlessLbPair2InstructionDataEncoder(),
    getInitializeCustomizablePermissionlessLbPair2InstructionDataDecoder()
  );
}

export type InitializeCustomizablePermissionlessLbPair2Input<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountTokenMintX extends string = string,
  TAccountTokenMintY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountOracle extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenBadgeX extends string = string,
  TAccountTokenBadgeY extends string = string,
  TAccountTokenProgramX extends string = string,
  TAccountTokenProgramY extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  tokenMintX: Address<TAccountTokenMintX>;
  tokenMintY: Address<TAccountTokenMintY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  oracle: Address<TAccountOracle>;
  userTokenX: Address<TAccountUserTokenX>;
  funder: TransactionSigner<TAccountFunder>;
  tokenBadgeX?: Address<TAccountTokenBadgeX>;
  tokenBadgeY?: Address<TAccountTokenBadgeY>;
  tokenProgramX: Address<TAccountTokenProgramX>;
  tokenProgramY: Address<TAccountTokenProgramY>;
  systemProgram?: Address<TAccountSystemProgram>;
  userTokenY: Address<TAccountUserTokenY>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: InitializeCustomizablePermissionlessLbPair2InstructionDataArgs['params'];
};

export function getInitializeCustomizablePermissionlessLbPair2Instruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountTokenMintX extends string,
  TAccountTokenMintY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountOracle extends string,
  TAccountUserTokenX extends string,
  TAccountFunder extends string,
  TAccountTokenBadgeX extends string,
  TAccountTokenBadgeY extends string,
  TAccountTokenProgramX extends string,
  TAccountTokenProgramY extends string,
  TAccountSystemProgram extends string,
  TAccountUserTokenY extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeCustomizablePermissionlessLbPair2Input<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountUserTokenX,
    TAccountFunder,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountUserTokenY,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCustomizablePermissionlessLbPair2Instruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountTokenMintX,
  TAccountTokenMintY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountOracle,
  TAccountUserTokenX,
  TAccountFunder,
  TAccountTokenBadgeX,
  TAccountTokenBadgeY,
  TAccountTokenProgramX,
  TAccountTokenProgramY,
  TAccountSystemProgram,
  TAccountUserTokenY,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    tokenMintX: { value: input.tokenMintX ?? null, isWritable: false },
    tokenMintY: { value: input.tokenMintY ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    userTokenX: { value: input.userTokenX ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenBadgeX: { value: input.tokenBadgeX ?? null, isWritable: false },
    tokenBadgeY: { value: input.tokenBadgeY ?? null, isWritable: false },
    tokenProgramX: { value: input.tokenProgramX ?? null, isWritable: false },
    tokenProgramY: { value: input.tokenProgramY ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    userTokenY: { value: input.userTokenY ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.tokenMintX),
      getAccountMeta(accounts.tokenMintY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.userTokenX),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenBadgeX),
      getAccountMeta(accounts.tokenBadgeY),
      getAccountMeta(accounts.tokenProgramX),
      getAccountMeta(accounts.tokenProgramY),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.userTokenY),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializeCustomizablePermissionlessLbPair2InstructionDataEncoder().encode(
      args as InitializeCustomizablePermissionlessLbPair2InstructionDataArgs
    ),
    programAddress,
  } as InitializeCustomizablePermissionlessLbPair2Instruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountUserTokenX,
    TAccountFunder,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountUserTokenY,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializeCustomizablePermissionlessLbPair2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArrayBitmapExtension?: TAccountMetas[1] | undefined;
    tokenMintX: TAccountMetas[2];
    tokenMintY: TAccountMetas[3];
    reserveX: TAccountMetas[4];
    reserveY: TAccountMetas[5];
    oracle: TAccountMetas[6];
    userTokenX: TAccountMetas[7];
    funder: TAccountMetas[8];
    tokenBadgeX?: TAccountMetas[9] | undefined;
    tokenBadgeY?: TAccountMetas[10] | undefined;
    tokenProgramX: TAccountMetas[11];
    tokenProgramY: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    userTokenY: TAccountMetas[14];
    eventAuthority: TAccountMetas[15];
    program: TAccountMetas[16];
  };
  data: InitializeCustomizablePermissionlessLbPair2InstructionData;
};

export function parseInitializeCustomizablePermissionlessLbPair2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeCustomizablePermissionlessLbPair2Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      tokenMintX: getNextAccount(),
      tokenMintY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      oracle: getNextAccount(),
      userTokenX: getNextAccount(),
      funder: getNextAccount(),
      tokenBadgeX: getNextOptionalAccount(),
      tokenBadgeY: getNextOptionalAccount(),
      tokenProgramX: getNextAccount(),
      tokenProgramY: getNextAccount(),
      systemProgram: getNextAccount(),
      userTokenY: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeCustomizablePermissionlessLbPair2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
