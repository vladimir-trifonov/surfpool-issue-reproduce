/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CLAIM_FEE_OPERATOR_DISCRIMINATOR = new Uint8Array([
  166, 48, 134, 86, 34, 200, 188, 150,
]);

export function getClaimFeeOperatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_FEE_OPERATOR_DISCRIMINATOR
  );
}

export type ClaimFeeOperator = {
  discriminator: ReadonlyUint8Array;
  /** operator */
  operator: Address;
  /** Reserve */
  padding: ReadonlyUint8Array;
};

export type ClaimFeeOperatorArgs = {
  /** operator */
  operator: Address;
  /** Reserve */
  padding: ReadonlyUint8Array;
};

export function getClaimFeeOperatorEncoder(): FixedSizeEncoder<ClaimFeeOperatorArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['operator', getAddressEncoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 128)],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_FEE_OPERATOR_DISCRIMINATOR })
  );
}

export function getClaimFeeOperatorDecoder(): FixedSizeDecoder<ClaimFeeOperator> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['operator', getAddressDecoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 128)],
  ]);
}

export function getClaimFeeOperatorCodec(): FixedSizeCodec<
  ClaimFeeOperatorArgs,
  ClaimFeeOperator
> {
  return combineCodec(
    getClaimFeeOperatorEncoder(),
    getClaimFeeOperatorDecoder()
  );
}

export function decodeClaimFeeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ClaimFeeOperator, TAddress>;
export function decodeClaimFeeOperator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ClaimFeeOperator, TAddress>;
export function decodeClaimFeeOperator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ClaimFeeOperator, TAddress>
  | MaybeAccount<ClaimFeeOperator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getClaimFeeOperatorDecoder()
  );
}

export async function fetchClaimFeeOperator<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ClaimFeeOperator, TAddress>> {
  const maybeAccount = await fetchMaybeClaimFeeOperator(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeClaimFeeOperator<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ClaimFeeOperator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeClaimFeeOperator(maybeAccount);
}

export async function fetchAllClaimFeeOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ClaimFeeOperator>[]> {
  const maybeAccounts = await fetchAllMaybeClaimFeeOperator(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeClaimFeeOperator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ClaimFeeOperator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeClaimFeeOperator(maybeAccount)
  );
}

export function getClaimFeeOperatorSize(): number {
  return 168;
}
