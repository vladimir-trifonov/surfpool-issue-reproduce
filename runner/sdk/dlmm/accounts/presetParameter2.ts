/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PRESET_PARAMETER2_DISCRIMINATOR = new Uint8Array([
  171, 236, 148, 115, 162, 113, 222, 174,
]);

export function getPresetParameter2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PRESET_PARAMETER2_DISCRIMINATOR
  );
}

export type PresetParameter2 = {
  discriminator: ReadonlyUint8Array;
  /** Bin step. Represent the price increment / decrement. */
  binStep: number;
  /** Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor */
  baseFactor: number;
  /** Filter period determine high frequency trading time window. */
  filterPeriod: number;
  /** Decay period determine when the volatile fee start decay / decrease. */
  decayPeriod: number;
  /** Used to scale the variable fee component depending on the dynamic of the market */
  variableFeeControl: number;
  /** Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate. */
  maxVolatilityAccumulator: number;
  /** Reduction factor controls the volatile fee rate decrement rate. */
  reductionFactor: number;
  /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
  protocolShare: number;
  /** index */
  index: number;
  /** Base fee power factor */
  baseFeePowerFactor: number;
  /** Padding 0 for future use */
  padding0: number;
  /** Padding 1 for future use */
  padding1: Array<bigint>;
};

export type PresetParameter2Args = {
  /** Bin step. Represent the price increment / decrement. */
  binStep: number;
  /** Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor */
  baseFactor: number;
  /** Filter period determine high frequency trading time window. */
  filterPeriod: number;
  /** Decay period determine when the volatile fee start decay / decrease. */
  decayPeriod: number;
  /** Used to scale the variable fee component depending on the dynamic of the market */
  variableFeeControl: number;
  /** Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate. */
  maxVolatilityAccumulator: number;
  /** Reduction factor controls the volatile fee rate decrement rate. */
  reductionFactor: number;
  /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
  protocolShare: number;
  /** index */
  index: number;
  /** Base fee power factor */
  baseFeePowerFactor: number;
  /** Padding 0 for future use */
  padding0: number;
  /** Padding 1 for future use */
  padding1: Array<number | bigint>;
};

export function getPresetParameter2Encoder(): FixedSizeEncoder<PresetParameter2Args> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['binStep', getU16Encoder()],
      ['baseFactor', getU16Encoder()],
      ['filterPeriod', getU16Encoder()],
      ['decayPeriod', getU16Encoder()],
      ['variableFeeControl', getU32Encoder()],
      ['maxVolatilityAccumulator', getU32Encoder()],
      ['reductionFactor', getU16Encoder()],
      ['protocolShare', getU16Encoder()],
      ['index', getU16Encoder()],
      ['baseFeePowerFactor', getU8Encoder()],
      ['padding0', getU8Encoder()],
      ['padding1', getArrayEncoder(getU64Encoder(), { size: 20 })],
    ]),
    (value) => ({ ...value, discriminator: PRESET_PARAMETER2_DISCRIMINATOR })
  );
}

export function getPresetParameter2Decoder(): FixedSizeDecoder<PresetParameter2> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['binStep', getU16Decoder()],
    ['baseFactor', getU16Decoder()],
    ['filterPeriod', getU16Decoder()],
    ['decayPeriod', getU16Decoder()],
    ['variableFeeControl', getU32Decoder()],
    ['maxVolatilityAccumulator', getU32Decoder()],
    ['reductionFactor', getU16Decoder()],
    ['protocolShare', getU16Decoder()],
    ['index', getU16Decoder()],
    ['baseFeePowerFactor', getU8Decoder()],
    ['padding0', getU8Decoder()],
    ['padding1', getArrayDecoder(getU64Decoder(), { size: 20 })],
  ]);
}

export function getPresetParameter2Codec(): FixedSizeCodec<
  PresetParameter2Args,
  PresetParameter2
> {
  return combineCodec(
    getPresetParameter2Encoder(),
    getPresetParameter2Decoder()
  );
}

export function decodePresetParameter2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PresetParameter2, TAddress>;
export function decodePresetParameter2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PresetParameter2, TAddress>;
export function decodePresetParameter2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<PresetParameter2, TAddress>
  | MaybeAccount<PresetParameter2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPresetParameter2Decoder()
  );
}

export async function fetchPresetParameter2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PresetParameter2, TAddress>> {
  const maybeAccount = await fetchMaybePresetParameter2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePresetParameter2<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PresetParameter2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePresetParameter2(maybeAccount);
}

export async function fetchAllPresetParameter2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PresetParameter2>[]> {
  const maybeAccounts = await fetchAllMaybePresetParameter2(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePresetParameter2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PresetParameter2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePresetParameter2(maybeAccount)
  );
}

export function getPresetParameter2Size(): number {
  return 192;
}
