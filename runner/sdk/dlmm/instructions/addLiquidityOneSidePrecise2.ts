/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCompressedBinDepositAmountDecoder,
  getCompressedBinDepositAmountEncoder,
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type CompressedBinDepositAmount,
  type CompressedBinDepositAmountArgs,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const ADD_LIQUIDITY_ONE_SIDE_PRECISE2_DISCRIMINATOR = new Uint8Array([
  33, 51, 163, 201, 117, 98, 125, 231,
]);

export function getAddLiquidityOneSidePrecise2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_ONE_SIDE_PRECISE2_DISCRIMINATOR
  );
}

export type AddLiquidityOneSidePrecise2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountUserToken extends string | AccountMeta<string> = string,
  TAccountReserve extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountUserToken extends string
        ? WritableAccount<TAccountUserToken>
        : TAccountUserToken,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityOneSidePrecise2InstructionData = {
  discriminator: ReadonlyUint8Array;
  bins: Array<CompressedBinDepositAmount>;
  decompressMultiplier: bigint;
  maxAmount: bigint;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type AddLiquidityOneSidePrecise2InstructionDataArgs = {
  bins: Array<CompressedBinDepositAmountArgs>;
  decompressMultiplier: number | bigint;
  maxAmount: number | bigint;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getAddLiquidityOneSidePrecise2InstructionDataEncoder(): Encoder<AddLiquidityOneSidePrecise2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bins', getArrayEncoder(getCompressedBinDepositAmountEncoder())],
      ['decompressMultiplier', getU64Encoder()],
      ['maxAmount', getU64Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_LIQUIDITY_ONE_SIDE_PRECISE2_DISCRIMINATOR,
    })
  );
}

export function getAddLiquidityOneSidePrecise2InstructionDataDecoder(): Decoder<AddLiquidityOneSidePrecise2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bins', getArrayDecoder(getCompressedBinDepositAmountDecoder())],
    ['decompressMultiplier', getU64Decoder()],
    ['maxAmount', getU64Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getAddLiquidityOneSidePrecise2InstructionDataCodec(): Codec<
  AddLiquidityOneSidePrecise2InstructionDataArgs,
  AddLiquidityOneSidePrecise2InstructionData
> {
  return combineCodec(
    getAddLiquidityOneSidePrecise2InstructionDataEncoder(),
    getAddLiquidityOneSidePrecise2InstructionDataDecoder()
  );
}

export type AddLiquidityOneSidePrecise2Input<
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountUserToken extends string = string,
  TAccountReserve extends string = string,
  TAccountTokenMint extends string = string,
  TAccountSender extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  position: Address<TAccountPosition>;
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  userToken: Address<TAccountUserToken>;
  reserve: Address<TAccountReserve>;
  tokenMint: Address<TAccountTokenMint>;
  sender: TransactionSigner<TAccountSender>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  bins: AddLiquidityOneSidePrecise2InstructionDataArgs['bins'];
  decompressMultiplier: AddLiquidityOneSidePrecise2InstructionDataArgs['decompressMultiplier'];
  maxAmount: AddLiquidityOneSidePrecise2InstructionDataArgs['maxAmount'];
  remainingAccountsInfo: AddLiquidityOneSidePrecise2InstructionDataArgs['remainingAccountsInfo'];
};

export function getAddLiquidityOneSidePrecise2Instruction<
  TAccountPosition extends string,
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountUserToken extends string,
  TAccountReserve extends string,
  TAccountTokenMint extends string,
  TAccountSender extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: AddLiquidityOneSidePrecise2Input<
    TAccountPosition,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountUserToken,
    TAccountReserve,
    TAccountTokenMint,
    TAccountSender,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityOneSidePrecise2Instruction<
  TProgramAddress,
  TAccountPosition,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountUserToken,
  TAccountReserve,
  TAccountTokenMint,
  TAccountSender,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    position: { value: input.position ?? null, isWritable: true },
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    userToken: { value: input.userToken ?? null, isWritable: true },
    reserve: { value: input.reserve ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    sender: { value: input.sender ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.userToken),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAddLiquidityOneSidePrecise2InstructionDataEncoder().encode(
      args as AddLiquidityOneSidePrecise2InstructionDataArgs
    ),
    programAddress,
  } as AddLiquidityOneSidePrecise2Instruction<
    TProgramAddress,
    TAccountPosition,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountUserToken,
    TAccountReserve,
    TAccountTokenMint,
    TAccountSender,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedAddLiquidityOneSidePrecise2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    position: TAccountMetas[0];
    lbPair: TAccountMetas[1];
    binArrayBitmapExtension?: TAccountMetas[2] | undefined;
    userToken: TAccountMetas[3];
    reserve: TAccountMetas[4];
    tokenMint: TAccountMetas[5];
    sender: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: AddLiquidityOneSidePrecise2InstructionData;
};

export function parseAddLiquidityOneSidePrecise2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddLiquidityOneSidePrecise2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      position: getNextAccount(),
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      userToken: getNextAccount(),
      reserve: getNextAccount(),
      tokenMint: getNextAccount(),
      sender: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAddLiquidityOneSidePrecise2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
