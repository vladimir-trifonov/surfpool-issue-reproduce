/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const CLAIM_REWARD2_DISCRIMINATOR = new Uint8Array([
  190, 3, 127, 119, 178, 87, 157, 183,
]);

export function getClaimReward2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARD2_DISCRIMINATOR
  );
}

export type ClaimReward2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimReward2InstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
  minBinId: number;
  maxBinId: number;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type ClaimReward2InstructionDataArgs = {
  rewardIndex: number | bigint;
  minBinId: number;
  maxBinId: number;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getClaimReward2InstructionDataEncoder(): Encoder<ClaimReward2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU64Encoder()],
      ['minBinId', getI32Encoder()],
      ['maxBinId', getI32Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_REWARD2_DISCRIMINATOR })
  );
}

export function getClaimReward2InstructionDataDecoder(): Decoder<ClaimReward2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU64Decoder()],
    ['minBinId', getI32Decoder()],
    ['maxBinId', getI32Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getClaimReward2InstructionDataCodec(): Codec<
  ClaimReward2InstructionDataArgs,
  ClaimReward2InstructionData
> {
  return combineCodec(
    getClaimReward2InstructionDataEncoder(),
    getClaimReward2InstructionDataDecoder()
  );
}

export type ClaimReward2Input<
  TAccountLbPair extends string = string,
  TAccountPosition extends string = string,
  TAccountSender extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  position: Address<TAccountPosition>;
  sender: TransactionSigner<TAccountSender>;
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: ClaimReward2InstructionDataArgs['rewardIndex'];
  minBinId: ClaimReward2InstructionDataArgs['minBinId'];
  maxBinId: ClaimReward2InstructionDataArgs['maxBinId'];
  remainingAccountsInfo: ClaimReward2InstructionDataArgs['remainingAccountsInfo'];
};

export function getClaimReward2Instruction<
  TAccountLbPair extends string,
  TAccountPosition extends string,
  TAccountSender extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: ClaimReward2Input<
    TAccountLbPair,
    TAccountPosition,
    TAccountSender,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimReward2Instruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountPosition,
  TAccountSender,
  TAccountRewardVault,
  TAccountRewardMint,
  TAccountUserTokenAccount,
  TAccountTokenProgram,
  TAccountMemoProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimReward2InstructionDataEncoder().encode(
      args as ClaimReward2InstructionDataArgs
    ),
    programAddress,
  } as ClaimReward2Instruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountPosition,
    TAccountSender,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountTokenProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedClaimReward2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    position: TAccountMetas[1];
    sender: TAccountMetas[2];
    rewardVault: TAccountMetas[3];
    rewardMint: TAccountMetas[4];
    userTokenAccount: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    memoProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: ClaimReward2InstructionData;
};

export function parseClaimReward2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimReward2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      position: getNextAccount(),
      sender: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardMint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimReward2InstructionDataDecoder().decode(instruction.data),
  };
}
