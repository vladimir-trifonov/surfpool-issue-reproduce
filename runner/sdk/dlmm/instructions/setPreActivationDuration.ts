/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PRE_ACTIVATION_DURATION_DISCRIMINATOR = new Uint8Array([
  165, 61, 201, 244, 130, 159, 22, 100,
]);

export function getSetPreActivationDurationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PRE_ACTIVATION_DURATION_DISCRIMINATOR
  );
}

export type SetPreActivationDurationInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      ...TRemainingAccounts,
    ]
  >;

export type SetPreActivationDurationInstructionData = {
  discriminator: ReadonlyUint8Array;
  preActivationDuration: bigint;
};

export type SetPreActivationDurationInstructionDataArgs = {
  preActivationDuration: number | bigint;
};

export function getSetPreActivationDurationInstructionDataEncoder(): FixedSizeEncoder<SetPreActivationDurationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['preActivationDuration', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PRE_ACTIVATION_DURATION_DISCRIMINATOR,
    })
  );
}

export function getSetPreActivationDurationInstructionDataDecoder(): FixedSizeDecoder<SetPreActivationDurationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['preActivationDuration', getU64Decoder()],
  ]);
}

export function getSetPreActivationDurationInstructionDataCodec(): FixedSizeCodec<
  SetPreActivationDurationInstructionDataArgs,
  SetPreActivationDurationInstructionData
> {
  return combineCodec(
    getSetPreActivationDurationInstructionDataEncoder(),
    getSetPreActivationDurationInstructionDataDecoder()
  );
}

export type SetPreActivationDurationInput<
  TAccountLbPair extends string = string,
  TAccountCreator extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  creator: TransactionSigner<TAccountCreator>;
  preActivationDuration: SetPreActivationDurationInstructionDataArgs['preActivationDuration'];
};

export function getSetPreActivationDurationInstruction<
  TAccountLbPair extends string,
  TAccountCreator extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: SetPreActivationDurationInput<TAccountLbPair, TAccountCreator>,
  config?: { programAddress?: TProgramAddress }
): SetPreActivationDurationInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountCreator
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.creator),
    ],
    data: getSetPreActivationDurationInstructionDataEncoder().encode(
      args as SetPreActivationDurationInstructionDataArgs
    ),
    programAddress,
  } as SetPreActivationDurationInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountCreator
  >);
}

export type ParsedSetPreActivationDurationInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    creator: TAccountMetas[1];
  };
  data: SetPreActivationDurationInstructionData;
};

export function parseSetPreActivationDurationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetPreActivationDurationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { lbPair: getNextAccount(), creator: getNextAccount() },
    data: getSetPreActivationDurationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
