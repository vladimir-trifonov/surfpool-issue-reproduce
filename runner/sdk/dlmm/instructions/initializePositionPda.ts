/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_POSITION_PDA_DISCRIMINATOR = new Uint8Array([
  46, 82, 125, 146, 85, 141, 228, 153,
]);

export function getInitializePositionPdaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POSITION_PDA_DISCRIMINATOR
  );
}

export type InitializePositionPdaInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountBase extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountLbPair extends string
        ? ReadonlyAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePositionPdaInstructionData = {
  discriminator: ReadonlyUint8Array;
  lowerBinId: number;
  width: number;
};

export type InitializePositionPdaInstructionDataArgs = {
  lowerBinId: number;
  width: number;
};

export function getInitializePositionPdaInstructionDataEncoder(): FixedSizeEncoder<InitializePositionPdaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lowerBinId', getI32Encoder()],
      ['width', getI32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_POSITION_PDA_DISCRIMINATOR,
    })
  );
}

export function getInitializePositionPdaInstructionDataDecoder(): FixedSizeDecoder<InitializePositionPdaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lowerBinId', getI32Decoder()],
    ['width', getI32Decoder()],
  ]);
}

export function getInitializePositionPdaInstructionDataCodec(): FixedSizeCodec<
  InitializePositionPdaInstructionDataArgs,
  InitializePositionPdaInstructionData
> {
  return combineCodec(
    getInitializePositionPdaInstructionDataEncoder(),
    getInitializePositionPdaInstructionDataDecoder()
  );
}

export type InitializePositionPdaInput<
  TAccountPayer extends string = string,
  TAccountBase extends string = string,
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  base: TransactionSigner<TAccountBase>;
  position: Address<TAccountPosition>;
  lbPair: Address<TAccountLbPair>;
  /** owner */
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  lowerBinId: InitializePositionPdaInstructionDataArgs['lowerBinId'];
  width: InitializePositionPdaInstructionDataArgs['width'];
};

export function getInitializePositionPdaInstruction<
  TAccountPayer extends string,
  TAccountBase extends string,
  TAccountPosition extends string,
  TAccountLbPair extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializePositionPdaInput<
    TAccountPayer,
    TAccountBase,
    TAccountPosition,
    TAccountLbPair,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePositionPdaInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountBase,
  TAccountPosition,
  TAccountLbPair,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountRent,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    lbPair: { value: input.lbPair ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializePositionPdaInstructionDataEncoder().encode(
      args as InitializePositionPdaInstructionDataArgs
    ),
    programAddress,
  } as InitializePositionPdaInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBase,
    TAccountPosition,
    TAccountLbPair,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializePositionPdaInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    base: TAccountMetas[1];
    position: TAccountMetas[2];
    lbPair: TAccountMetas[3];
    /** owner */
    owner: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    rent: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: InitializePositionPdaInstructionData;
};

export function parseInitializePositionPdaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePositionPdaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      base: getNextAccount(),
      position: getNextAccount(),
      lbPair: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializePositionPdaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
