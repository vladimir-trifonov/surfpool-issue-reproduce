/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const FUND_REWARD_DISCRIMINATOR = new Uint8Array([
  188, 50, 249, 165, 93, 151, 38, 63,
]);

export function getFundRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FUND_REWARD_DISCRIMINATOR);
}

export type FundRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountFunderTokenAccount extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountBinArray extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountFunderTokenAccount extends string
        ? WritableAccount<TAccountFunderTokenAccount>
        : TAccountFunderTokenAccount,
      TAccountFunder extends string
        ? ReadonlySignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountBinArray extends string
        ? WritableAccount<TAccountBinArray>
        : TAccountBinArray,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FundRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
  amount: bigint;
  carryForward: boolean;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type FundRewardInstructionDataArgs = {
  rewardIndex: number | bigint;
  amount: number | bigint;
  carryForward: boolean;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getFundRewardInstructionDataEncoder(): Encoder<FundRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU64Encoder()],
      ['amount', getU64Encoder()],
      ['carryForward', getBooleanEncoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({ ...value, discriminator: FUND_REWARD_DISCRIMINATOR })
  );
}

export function getFundRewardInstructionDataDecoder(): Decoder<FundRewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU64Decoder()],
    ['amount', getU64Decoder()],
    ['carryForward', getBooleanDecoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getFundRewardInstructionDataCodec(): Codec<
  FundRewardInstructionDataArgs,
  FundRewardInstructionData
> {
  return combineCodec(
    getFundRewardInstructionDataEncoder(),
    getFundRewardInstructionDataDecoder()
  );
}

export type FundRewardInput<
  TAccountLbPair extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountFunderTokenAccount extends string = string,
  TAccountFunder extends string = string,
  TAccountBinArray extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  funderTokenAccount: Address<TAccountFunderTokenAccount>;
  funder: TransactionSigner<TAccountFunder>;
  binArray: Address<TAccountBinArray>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: FundRewardInstructionDataArgs['rewardIndex'];
  amount: FundRewardInstructionDataArgs['amount'];
  carryForward: FundRewardInstructionDataArgs['carryForward'];
  remainingAccountsInfo: FundRewardInstructionDataArgs['remainingAccountsInfo'];
};

export function getFundRewardInstruction<
  TAccountLbPair extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountFunderTokenAccount extends string,
  TAccountFunder extends string,
  TAccountBinArray extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: FundRewardInput<
    TAccountLbPair,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountFunderTokenAccount,
    TAccountFunder,
    TAccountBinArray,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FundRewardInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountRewardVault,
  TAccountRewardMint,
  TAccountFunderTokenAccount,
  TAccountFunder,
  TAccountBinArray,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    funderTokenAccount: {
      value: input.funderTokenAccount ?? null,
      isWritable: true,
    },
    funder: { value: input.funder ?? null, isWritable: false },
    binArray: { value: input.binArray ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.funderTokenAccount),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.binArray),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getFundRewardInstructionDataEncoder().encode(
      args as FundRewardInstructionDataArgs
    ),
    programAddress,
  } as FundRewardInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountFunderTokenAccount,
    TAccountFunder,
    TAccountBinArray,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedFundRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    rewardVault: TAccountMetas[1];
    rewardMint: TAccountMetas[2];
    funderTokenAccount: TAccountMetas[3];
    funder: TAccountMetas[4];
    binArray: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: FundRewardInstructionData;
};

export function parseFundRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedFundRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardMint: getNextAccount(),
      funderTokenAccount: getNextAccount(),
      funder: getNextAccount(),
      binArray: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getFundRewardInstructionDataDecoder().decode(instruction.data),
  };
}
