/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR =
  new Uint8Array([47, 157, 226, 180, 12, 240, 33, 71]);

export function getInitializeBinArrayBitmapExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR
  );
}

export type InitializeBinArrayBitmapExtensionInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? ReadonlyAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeBinArrayBitmapExtensionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeBinArrayBitmapExtensionInstructionDataArgs = {};

export function getInitializeBinArrayBitmapExtensionInstructionDataEncoder(): FixedSizeEncoder<InitializeBinArrayBitmapExtensionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_BIN_ARRAY_BITMAP_EXTENSION_DISCRIMINATOR,
    })
  );
}

export function getInitializeBinArrayBitmapExtensionInstructionDataDecoder(): FixedSizeDecoder<InitializeBinArrayBitmapExtensionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeBinArrayBitmapExtensionInstructionDataCodec(): FixedSizeCodec<
  InitializeBinArrayBitmapExtensionInstructionDataArgs,
  InitializeBinArrayBitmapExtensionInstructionData
> {
  return combineCodec(
    getInitializeBinArrayBitmapExtensionInstructionDataEncoder(),
    getInitializeBinArrayBitmapExtensionInstructionDataDecoder()
  );
}

export type InitializeBinArrayBitmapExtensionInput<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountFunder extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  /** Initialize an account to store if a bin array is initialized. */
  binArrayBitmapExtension: Address<TAccountBinArrayBitmapExtension>;
  funder: TransactionSigner<TAccountFunder>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export function getInitializeBinArrayBitmapExtensionInstruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountFunder extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeBinArrayBitmapExtensionInput<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountFunder,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeBinArrayBitmapExtensionInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountFunder,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: false },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializeBinArrayBitmapExtensionInstructionDataEncoder().encode(
      {}
    ),
    programAddress,
  } as InitializeBinArrayBitmapExtensionInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountFunder,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedInitializeBinArrayBitmapExtensionInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    /** Initialize an account to store if a bin array is initialized. */
    binArrayBitmapExtension: TAccountMetas[1];
    funder: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    rent: TAccountMetas[4];
  };
  data: InitializeBinArrayBitmapExtensionInstructionData;
};

export function parseInitializeBinArrayBitmapExtensionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeBinArrayBitmapExtensionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextAccount(),
      funder: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializeBinArrayBitmapExtensionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
