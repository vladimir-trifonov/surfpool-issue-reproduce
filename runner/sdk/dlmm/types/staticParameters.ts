/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

/** Parameter that set by the protocol */
export type StaticParameters = {
  /** Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor */
  baseFactor: number;
  /** Filter period determine high frequency trading time window. */
  filterPeriod: number;
  /** Decay period determine when the volatile fee start decay / decrease. */
  decayPeriod: number;
  /** Reduction factor controls the volatile fee rate decrement rate. */
  reductionFactor: number;
  /** Used to scale the variable fee component depending on the dynamic of the market */
  variableFeeControl: number;
  /** Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate. */
  maxVolatilityAccumulator: number;
  /** Min bin id supported by the pool based on the configured bin step. */
  minBinId: number;
  /** Max bin id supported by the pool based on the configured bin step. */
  maxBinId: number;
  /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
  protocolShare: number;
  /** Base fee power factor */
  baseFeePowerFactor: number;
  /** Padding for bytemuck safe alignment */
  padding: ReadonlyUint8Array;
};

export type StaticParametersArgs = StaticParameters;

export function getStaticParametersEncoder(): FixedSizeEncoder<StaticParametersArgs> {
  return getStructEncoder([
    ['baseFactor', getU16Encoder()],
    ['filterPeriod', getU16Encoder()],
    ['decayPeriod', getU16Encoder()],
    ['reductionFactor', getU16Encoder()],
    ['variableFeeControl', getU32Encoder()],
    ['maxVolatilityAccumulator', getU32Encoder()],
    ['minBinId', getI32Encoder()],
    ['maxBinId', getI32Encoder()],
    ['protocolShare', getU16Encoder()],
    ['baseFeePowerFactor', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 5)],
  ]);
}

export function getStaticParametersDecoder(): FixedSizeDecoder<StaticParameters> {
  return getStructDecoder([
    ['baseFactor', getU16Decoder()],
    ['filterPeriod', getU16Decoder()],
    ['decayPeriod', getU16Decoder()],
    ['reductionFactor', getU16Decoder()],
    ['variableFeeControl', getU32Decoder()],
    ['maxVolatilityAccumulator', getU32Decoder()],
    ['minBinId', getI32Decoder()],
    ['maxBinId', getI32Decoder()],
    ['protocolShare', getU16Decoder()],
    ['baseFeePowerFactor', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 5)],
  ]);
}

export function getStaticParametersCodec(): FixedSizeCodec<
  StaticParametersArgs,
  StaticParameters
> {
  return combineCodec(
    getStaticParametersEncoder(),
    getStaticParametersDecoder()
  );
}
