/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

/** Parameters that changes based on dynamic of the market */
export type VariableParameters = {
  /**
   * Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
   * It affects the variable fee rate
   */
  volatilityAccumulator: number;
  /** Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator */
  volatilityReference: number;
  /** Active bin id of last swap. */
  indexReference: number;
  /** Padding for bytemuck safe alignment */
  padding: ReadonlyUint8Array;
  /** Last timestamp the variable parameters was updated */
  lastUpdateTimestamp: bigint;
  /** Padding for bytemuck safe alignment */
  padding1: ReadonlyUint8Array;
};

export type VariableParametersArgs = {
  /**
   * Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
   * It affects the variable fee rate
   */
  volatilityAccumulator: number;
  /** Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator */
  volatilityReference: number;
  /** Active bin id of last swap. */
  indexReference: number;
  /** Padding for bytemuck safe alignment */
  padding: ReadonlyUint8Array;
  /** Last timestamp the variable parameters was updated */
  lastUpdateTimestamp: number | bigint;
  /** Padding for bytemuck safe alignment */
  padding1: ReadonlyUint8Array;
};

export function getVariableParametersEncoder(): FixedSizeEncoder<VariableParametersArgs> {
  return getStructEncoder([
    ['volatilityAccumulator', getU32Encoder()],
    ['volatilityReference', getU32Encoder()],
    ['indexReference', getI32Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 4)],
    ['lastUpdateTimestamp', getI64Encoder()],
    ['padding1', fixEncoderSize(getBytesEncoder(), 8)],
  ]);
}

export function getVariableParametersDecoder(): FixedSizeDecoder<VariableParameters> {
  return getStructDecoder([
    ['volatilityAccumulator', getU32Decoder()],
    ['volatilityReference', getU32Decoder()],
    ['indexReference', getI32Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 4)],
    ['lastUpdateTimestamp', getI64Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getVariableParametersCodec(): FixedSizeCodec<
  VariableParametersArgs,
  VariableParameters
> {
  return combineCodec(
    getVariableParametersEncoder(),
    getVariableParametersDecoder()
  );
}
