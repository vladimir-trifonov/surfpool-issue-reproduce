/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

export type Bin = {
  /** Amount of token X in the bin. This already excluded protocol fees. */
  amountX: bigint;
  /** Amount of token Y in the bin. This already excluded protocol fees. */
  amountY: bigint;
  /** Bin price */
  price: bigint;
  /** Liquidities of the bin. This is the same as LP mint supply. q-number */
  liquiditySupply: bigint;
  /** reward_a_per_token_stored */
  rewardPerTokenStored: Array<bigint>;
  /** Swap fee amount of token X per liquidity deposited. */
  feeAmountXPerTokenStored: bigint;
  /** Swap fee amount of token Y per liquidity deposited. */
  feeAmountYPerTokenStored: bigint;
  /** Total token X swap into the bin. Only used for tracking purpose. */
  amountXIn: bigint;
  /** Total token Y swap into he bin. Only used for tracking purpose. */
  amountYIn: bigint;
};

export type BinArgs = {
  /** Amount of token X in the bin. This already excluded protocol fees. */
  amountX: number | bigint;
  /** Amount of token Y in the bin. This already excluded protocol fees. */
  amountY: number | bigint;
  /** Bin price */
  price: number | bigint;
  /** Liquidities of the bin. This is the same as LP mint supply. q-number */
  liquiditySupply: number | bigint;
  /** reward_a_per_token_stored */
  rewardPerTokenStored: Array<number | bigint>;
  /** Swap fee amount of token X per liquidity deposited. */
  feeAmountXPerTokenStored: number | bigint;
  /** Swap fee amount of token Y per liquidity deposited. */
  feeAmountYPerTokenStored: number | bigint;
  /** Total token X swap into the bin. Only used for tracking purpose. */
  amountXIn: number | bigint;
  /** Total token Y swap into he bin. Only used for tracking purpose. */
  amountYIn: number | bigint;
};

export function getBinEncoder(): FixedSizeEncoder<BinArgs> {
  return getStructEncoder([
    ['amountX', getU64Encoder()],
    ['amountY', getU64Encoder()],
    ['price', getU128Encoder()],
    ['liquiditySupply', getU128Encoder()],
    ['rewardPerTokenStored', getArrayEncoder(getU128Encoder(), { size: 2 })],
    ['feeAmountXPerTokenStored', getU128Encoder()],
    ['feeAmountYPerTokenStored', getU128Encoder()],
    ['amountXIn', getU128Encoder()],
    ['amountYIn', getU128Encoder()],
  ]);
}

export function getBinDecoder(): FixedSizeDecoder<Bin> {
  return getStructDecoder([
    ['amountX', getU64Decoder()],
    ['amountY', getU64Decoder()],
    ['price', getU128Decoder()],
    ['liquiditySupply', getU128Decoder()],
    ['rewardPerTokenStored', getArrayDecoder(getU128Decoder(), { size: 2 })],
    ['feeAmountXPerTokenStored', getU128Decoder()],
    ['feeAmountYPerTokenStored', getU128Decoder()],
    ['amountXIn', getU128Decoder()],
    ['amountYIn', getU128Decoder()],
  ]);
}

export function getBinCodec(): FixedSizeCodec<BinArgs, Bin> {
  return combineCodec(getBinEncoder(), getBinDecoder());
}
