/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const SWAP2_DISCRIMINATOR = new Uint8Array([
  65, 75, 63, 76, 235, 91, 91, 136,
]);

export function getSwap2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP2_DISCRIMINATOR);
}

export type Swap2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountUserTokenIn extends string | AccountMeta<string> = string,
  TAccountUserTokenOut extends string | AccountMeta<string> = string,
  TAccountTokenXMint extends string | AccountMeta<string> = string,
  TAccountTokenYMint extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountHostFeeIn extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountTokenXProgram extends string | AccountMeta<string> = string,
  TAccountTokenYProgram extends string | AccountMeta<string> = string,
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? ReadonlyAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountUserTokenIn extends string
        ? WritableAccount<TAccountUserTokenIn>
        : TAccountUserTokenIn,
      TAccountUserTokenOut extends string
        ? WritableAccount<TAccountUserTokenOut>
        : TAccountUserTokenOut,
      TAccountTokenXMint extends string
        ? ReadonlyAccount<TAccountTokenXMint>
        : TAccountTokenXMint,
      TAccountTokenYMint extends string
        ? ReadonlyAccount<TAccountTokenYMint>
        : TAccountTokenYMint,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountHostFeeIn extends string
        ? WritableAccount<TAccountHostFeeIn>
        : TAccountHostFeeIn,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountTokenXProgram extends string
        ? ReadonlyAccount<TAccountTokenXProgram>
        : TAccountTokenXProgram,
      TAccountTokenYProgram extends string
        ? ReadonlyAccount<TAccountTokenYProgram>
        : TAccountTokenYProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type Swap2InstructionData = {
  discriminator: ReadonlyUint8Array;
  amountIn: bigint;
  minAmountOut: bigint;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type Swap2InstructionDataArgs = {
  amountIn: number | bigint;
  minAmountOut: number | bigint;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getSwap2InstructionDataEncoder(): Encoder<Swap2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP2_DISCRIMINATOR })
  );
}

export function getSwap2InstructionDataDecoder(): Decoder<Swap2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getSwap2InstructionDataCodec(): Codec<
  Swap2InstructionDataArgs,
  Swap2InstructionData
> {
  return combineCodec(
    getSwap2InstructionDataEncoder(),
    getSwap2InstructionDataDecoder()
  );
}

export type Swap2Input<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountUserTokenIn extends string = string,
  TAccountUserTokenOut extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountOracle extends string = string,
  TAccountHostFeeIn extends string = string,
  TAccountUser extends string = string,
  TAccountTokenXProgram extends string = string,
  TAccountTokenYProgram extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  userTokenIn: Address<TAccountUserTokenIn>;
  userTokenOut: Address<TAccountUserTokenOut>;
  tokenXMint: Address<TAccountTokenXMint>;
  tokenYMint: Address<TAccountTokenYMint>;
  oracle: Address<TAccountOracle>;
  hostFeeIn?: Address<TAccountHostFeeIn>;
  user: TransactionSigner<TAccountUser>;
  tokenXProgram: Address<TAccountTokenXProgram>;
  tokenYProgram: Address<TAccountTokenYProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  amountIn: Swap2InstructionDataArgs['amountIn'];
  minAmountOut: Swap2InstructionDataArgs['minAmountOut'];
  remainingAccountsInfo: Swap2InstructionDataArgs['remainingAccountsInfo'];
};

export function getSwap2Instruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountUserTokenIn extends string,
  TAccountUserTokenOut extends string,
  TAccountTokenXMint extends string,
  TAccountTokenYMint extends string,
  TAccountOracle extends string,
  TAccountHostFeeIn extends string,
  TAccountUser extends string,
  TAccountTokenXProgram extends string,
  TAccountTokenYProgram extends string,
  TAccountMemoProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: Swap2Input<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenIn,
    TAccountUserTokenOut,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountOracle,
    TAccountHostFeeIn,
    TAccountUser,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Swap2Instruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountReserveX,
  TAccountReserveY,
  TAccountUserTokenIn,
  TAccountUserTokenOut,
  TAccountTokenXMint,
  TAccountTokenYMint,
  TAccountOracle,
  TAccountHostFeeIn,
  TAccountUser,
  TAccountTokenXProgram,
  TAccountTokenYProgram,
  TAccountMemoProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: false,
    },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    userTokenIn: { value: input.userTokenIn ?? null, isWritable: true },
    userTokenOut: { value: input.userTokenOut ?? null, isWritable: true },
    tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
    tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: true },
    hostFeeIn: { value: input.hostFeeIn ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    tokenXProgram: { value: input.tokenXProgram ?? null, isWritable: false },
    tokenYProgram: { value: input.tokenYProgram ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.userTokenIn),
      getAccountMeta(accounts.userTokenOut),
      getAccountMeta(accounts.tokenXMint),
      getAccountMeta(accounts.tokenYMint),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.hostFeeIn),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenXProgram),
      getAccountMeta(accounts.tokenYProgram),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getSwap2InstructionDataEncoder().encode(
      args as Swap2InstructionDataArgs
    ),
    programAddress,
  } as Swap2Instruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountReserveX,
    TAccountReserveY,
    TAccountUserTokenIn,
    TAccountUserTokenOut,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountOracle,
    TAccountHostFeeIn,
    TAccountUser,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountMemoProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedSwap2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArrayBitmapExtension?: TAccountMetas[1] | undefined;
    reserveX: TAccountMetas[2];
    reserveY: TAccountMetas[3];
    userTokenIn: TAccountMetas[4];
    userTokenOut: TAccountMetas[5];
    tokenXMint: TAccountMetas[6];
    tokenYMint: TAccountMetas[7];
    oracle: TAccountMetas[8];
    hostFeeIn?: TAccountMetas[9] | undefined;
    user: TAccountMetas[10];
    tokenXProgram: TAccountMetas[11];
    tokenYProgram: TAccountMetas[12];
    memoProgram: TAccountMetas[13];
    eventAuthority: TAccountMetas[14];
    program: TAccountMetas[15];
  };
  data: Swap2InstructionData;
};

export function parseSwap2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwap2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      userTokenIn: getNextAccount(),
      userTokenOut: getNextAccount(),
      tokenXMint: getNextAccount(),
      tokenYMint: getNextAccount(),
      oracle: getNextAccount(),
      hostFeeIn: getNextOptionalAccount(),
      user: getNextAccount(),
      tokenXProgram: getNextAccount(),
      tokenYProgram: getNextAccount(),
      memoProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSwap2InstructionDataDecoder().decode(instruction.data),
  };
}
