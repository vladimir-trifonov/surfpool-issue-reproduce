/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_LB_PAIR_DISCRIMINATOR = new Uint8Array([
  45, 154, 237, 210, 221, 15, 166, 92,
]);

export function getInitializeLbPairDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_LB_PAIR_DISCRIMINATOR
  );
}

export type InitializeLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountTokenMintX extends string | AccountMeta<string> = string,
  TAccountTokenMintY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountPresetParameter extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountTokenMintX extends string
        ? ReadonlyAccount<TAccountTokenMintX>
        : TAccountTokenMintX,
      TAccountTokenMintY extends string
        ? ReadonlyAccount<TAccountTokenMintY>
        : TAccountTokenMintY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountPresetParameter extends string
        ? ReadonlyAccount<TAccountPresetParameter>
        : TAccountPresetParameter,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeLbPairInstructionData = {
  discriminator: ReadonlyUint8Array;
  activeId: number;
  binStep: number;
};

export type InitializeLbPairInstructionDataArgs = {
  activeId: number;
  binStep: number;
};

export function getInitializeLbPairInstructionDataEncoder(): FixedSizeEncoder<InitializeLbPairInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['activeId', getI32Encoder()],
      ['binStep', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_LB_PAIR_DISCRIMINATOR })
  );
}

export function getInitializeLbPairInstructionDataDecoder(): FixedSizeDecoder<InitializeLbPairInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['activeId', getI32Decoder()],
    ['binStep', getU16Decoder()],
  ]);
}

export function getInitializeLbPairInstructionDataCodec(): FixedSizeCodec<
  InitializeLbPairInstructionDataArgs,
  InitializeLbPairInstructionData
> {
  return combineCodec(
    getInitializeLbPairInstructionDataEncoder(),
    getInitializeLbPairInstructionDataDecoder()
  );
}

export type InitializeLbPairInput<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountTokenMintX extends string = string,
  TAccountTokenMintY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountOracle extends string = string,
  TAccountPresetParameter extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  tokenMintX: Address<TAccountTokenMintX>;
  tokenMintY: Address<TAccountTokenMintY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  oracle: Address<TAccountOracle>;
  presetParameter: Address<TAccountPresetParameter>;
  funder: TransactionSigner<TAccountFunder>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  activeId: InitializeLbPairInstructionDataArgs['activeId'];
  binStep: InitializeLbPairInstructionDataArgs['binStep'];
};

export function getInitializeLbPairInstruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountTokenMintX extends string,
  TAccountTokenMintY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountOracle extends string,
  TAccountPresetParameter extends string,
  TAccountFunder extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeLbPairInput<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountPresetParameter,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeLbPairInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountTokenMintX,
  TAccountTokenMintY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountOracle,
  TAccountPresetParameter,
  TAccountFunder,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    tokenMintX: { value: input.tokenMintX ?? null, isWritable: false },
    tokenMintY: { value: input.tokenMintY ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    presetParameter: {
      value: input.presetParameter ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.tokenMintX),
      getAccountMeta(accounts.tokenMintY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.presetParameter),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializeLbPairInstructionDataEncoder().encode(
      args as InitializeLbPairInstructionDataArgs
    ),
    programAddress,
  } as InitializeLbPairInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountPresetParameter,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializeLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArrayBitmapExtension?: TAccountMetas[1] | undefined;
    tokenMintX: TAccountMetas[2];
    tokenMintY: TAccountMetas[3];
    reserveX: TAccountMetas[4];
    reserveY: TAccountMetas[5];
    oracle: TAccountMetas[6];
    presetParameter: TAccountMetas[7];
    funder: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    rent: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: InitializeLbPairInstructionData;
};

export function parseInitializeLbPairInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeLbPairInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      tokenMintX: getNextAccount(),
      tokenMintY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      oracle: getNextAccount(),
      presetParameter: getNextAccount(),
      funder: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeLbPairInstructionDataDecoder().decode(instruction.data),
  };
}
