/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_BIN_ARRAY_DISCRIMINATOR = new Uint8Array([
  35, 86, 19, 185, 78, 212, 75, 211,
]);

export function getInitializeBinArrayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_BIN_ARRAY_DISCRIMINATOR
  );
}

export type InitializeBinArrayInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArray extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? ReadonlyAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArray extends string
        ? WritableAccount<TAccountBinArray>
        : TAccountBinArray,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeBinArrayInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: bigint;
};

export type InitializeBinArrayInstructionDataArgs = { index: number | bigint };

export function getInitializeBinArrayInstructionDataEncoder(): FixedSizeEncoder<InitializeBinArrayInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_BIN_ARRAY_DISCRIMINATOR })
  );
}

export function getInitializeBinArrayInstructionDataDecoder(): FixedSizeDecoder<InitializeBinArrayInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getI64Decoder()],
  ]);
}

export function getInitializeBinArrayInstructionDataCodec(): FixedSizeCodec<
  InitializeBinArrayInstructionDataArgs,
  InitializeBinArrayInstructionData
> {
  return combineCodec(
    getInitializeBinArrayInstructionDataEncoder(),
    getInitializeBinArrayInstructionDataDecoder()
  );
}

export type InitializeBinArrayInput<
  TAccountLbPair extends string = string,
  TAccountBinArray extends string = string,
  TAccountFunder extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArray: Address<TAccountBinArray>;
  funder: TransactionSigner<TAccountFunder>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: InitializeBinArrayInstructionDataArgs['index'];
};

export function getInitializeBinArrayInstruction<
  TAccountLbPair extends string,
  TAccountBinArray extends string,
  TAccountFunder extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeBinArrayInput<
    TAccountLbPair,
    TAccountBinArray,
    TAccountFunder,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeBinArrayInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArray,
  TAccountFunder,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: false },
    binArray: { value: input.binArray ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArray),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeBinArrayInstructionDataEncoder().encode(
      args as InitializeBinArrayInstructionDataArgs
    ),
    programAddress,
  } as InitializeBinArrayInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArray,
    TAccountFunder,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeBinArrayInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArray: TAccountMetas[1];
    funder: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeBinArrayInstructionData;
};

export function parseInitializeBinArrayInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeBinArrayInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArray: getNextAccount(),
      funder: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeBinArrayInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
