/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type CustomizableParams = {
  /** Pool price */
  activeId: number;
  /** Bin step */
  binStep: number;
  /** Base factor */
  baseFactor: number;
  /** Activation type. 0 = Slot, 1 = Time. Check ActivationType enum */
  activationType: number;
  /** Whether the pool has an alpha vault */
  hasAlphaVault: boolean;
  /** Decide when does the pool start trade. None = Now */
  activationPoint: Option<bigint>;
  /** Pool creator have permission to enable/disable pool with restricted program validation. Only applicable for customizable permissionless pool. */
  creatorPoolOnOffControl: boolean;
  /** Base fee power factor */
  baseFeePowerFactor: number;
  /** Padding, for future use */
  padding: ReadonlyUint8Array;
};

export type CustomizableParamsArgs = {
  /** Pool price */
  activeId: number;
  /** Bin step */
  binStep: number;
  /** Base factor */
  baseFactor: number;
  /** Activation type. 0 = Slot, 1 = Time. Check ActivationType enum */
  activationType: number;
  /** Whether the pool has an alpha vault */
  hasAlphaVault: boolean;
  /** Decide when does the pool start trade. None = Now */
  activationPoint: OptionOrNullable<number | bigint>;
  /** Pool creator have permission to enable/disable pool with restricted program validation. Only applicable for customizable permissionless pool. */
  creatorPoolOnOffControl: boolean;
  /** Base fee power factor */
  baseFeePowerFactor: number;
  /** Padding, for future use */
  padding: ReadonlyUint8Array;
};

export function getCustomizableParamsEncoder(): Encoder<CustomizableParamsArgs> {
  return getStructEncoder([
    ['activeId', getI32Encoder()],
    ['binStep', getU16Encoder()],
    ['baseFactor', getU16Encoder()],
    ['activationType', getU8Encoder()],
    ['hasAlphaVault', getBooleanEncoder()],
    ['activationPoint', getOptionEncoder(getU64Encoder())],
    ['creatorPoolOnOffControl', getBooleanEncoder()],
    ['baseFeePowerFactor', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 62)],
  ]);
}

export function getCustomizableParamsDecoder(): Decoder<CustomizableParams> {
  return getStructDecoder([
    ['activeId', getI32Decoder()],
    ['binStep', getU16Decoder()],
    ['baseFactor', getU16Decoder()],
    ['activationType', getU8Decoder()],
    ['hasAlphaVault', getBooleanDecoder()],
    ['activationPoint', getOptionDecoder(getU64Decoder())],
    ['creatorPoolOnOffControl', getBooleanDecoder()],
    ['baseFeePowerFactor', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 62)],
  ]);
}

export function getCustomizableParamsCodec(): Codec<
  CustomizableParamsArgs,
  CustomizableParams
> {
  return combineCodec(
    getCustomizableParamsEncoder(),
    getCustomizableParamsDecoder()
  );
}
