/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { RAYDIUM_CP_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountOwnerLpToken extends string | AccountMeta<string> = string,
  TAccountToken0Account extends string | AccountMeta<string> = string,
  TAccountToken1Account extends string | AccountMeta<string> = string,
  TAccountToken0Vault extends string | AccountMeta<string> = string,
  TAccountToken1Vault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenProgram2022 extends string | AccountMeta<string> = string,
  TAccountVault0Mint extends string | AccountMeta<string> = string,
  TAccountVault1Mint extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountMemoProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountOwnerLpToken extends string
        ? WritableAccount<TAccountOwnerLpToken>
        : TAccountOwnerLpToken,
      TAccountToken0Account extends string
        ? WritableAccount<TAccountToken0Account>
        : TAccountToken0Account,
      TAccountToken1Account extends string
        ? WritableAccount<TAccountToken1Account>
        : TAccountToken1Account,
      TAccountToken0Vault extends string
        ? WritableAccount<TAccountToken0Vault>
        : TAccountToken0Vault,
      TAccountToken1Vault extends string
        ? WritableAccount<TAccountToken1Vault>
        : TAccountToken1Vault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      TAccountVault0Mint extends string
        ? ReadonlyAccount<TAccountVault0Mint>
        : TAccountVault0Mint,
      TAccountVault1Mint extends string
        ? ReadonlyAccount<TAccountVault1Mint>
        : TAccountVault1Mint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  lpTokenAmount: bigint;
  minimumToken0Amount: bigint;
  minimumToken1Amount: bigint;
};

export type WithdrawInstructionDataArgs = {
  lpTokenAmount: number | bigint;
  minimumToken0Amount: number | bigint;
  minimumToken1Amount: number | bigint;
};

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpTokenAmount', getU64Encoder()],
      ['minimumToken0Amount', getU64Encoder()],
      ['minimumToken1Amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpTokenAmount', getU64Decoder()],
    ['minimumToken0Amount', getU64Decoder()],
    ['minimumToken1Amount', getU64Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawInput<
  TAccountOwner extends string = string,
  TAccountAuthority extends string = string,
  TAccountPoolState extends string = string,
  TAccountOwnerLpToken extends string = string,
  TAccountToken0Account extends string = string,
  TAccountToken1Account extends string = string,
  TAccountToken0Vault extends string = string,
  TAccountToken1Vault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
  TAccountLpMint extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  /** Pays to mint the position */
  owner: TransactionSigner<TAccountOwner>;
  authority: Address<TAccountAuthority>;
  /** Pool state account */
  poolState: Address<TAccountPoolState>;
  /** Owner lp token account */
  ownerLpToken: Address<TAccountOwnerLpToken>;
  /** The owner's token account for receive token_0 */
  token0Account: Address<TAccountToken0Account>;
  /** The owner's token account for receive token_1 */
  token1Account: Address<TAccountToken1Account>;
  /** The address that holds pool tokens for token_0 */
  token0Vault: Address<TAccountToken0Vault>;
  /** The address that holds pool tokens for token_1 */
  token1Vault: Address<TAccountToken1Vault>;
  /** token Program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token program 2022 */
  tokenProgram2022: Address<TAccountTokenProgram2022>;
  /** The mint of token_0 vault */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token_1 vault */
  vault1Mint: Address<TAccountVault1Mint>;
  /** Pool lp token mint */
  lpMint: Address<TAccountLpMint>;
  /** memo program */
  memoProgram: Address<TAccountMemoProgram>;
  lpTokenAmount: WithdrawInstructionDataArgs['lpTokenAmount'];
  minimumToken0Amount: WithdrawInstructionDataArgs['minimumToken0Amount'];
  minimumToken1Amount: WithdrawInstructionDataArgs['minimumToken1Amount'];
};

export function getWithdrawInstruction<
  TAccountOwner extends string,
  TAccountAuthority extends string,
  TAccountPoolState extends string,
  TAccountOwnerLpToken extends string,
  TAccountToken0Account extends string,
  TAccountToken1Account extends string,
  TAccountToken0Vault extends string,
  TAccountToken1Vault extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TAccountLpMint extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountOwnerLpToken,
    TAccountToken0Account,
    TAccountToken1Account,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountLpMint,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountAuthority,
  TAccountPoolState,
  TAccountOwnerLpToken,
  TAccountToken0Account,
  TAccountToken1Account,
  TAccountToken0Vault,
  TAccountToken1Vault,
  TAccountTokenProgram,
  TAccountTokenProgram2022,
  TAccountVault0Mint,
  TAccountVault1Mint,
  TAccountLpMint,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RAYDIUM_CP_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    ownerLpToken: { value: input.ownerLpToken ?? null, isWritable: true },
    token0Account: { value: input.token0Account ?? null, isWritable: true },
    token1Account: { value: input.token1Account ?? null, isWritable: true },
    token0Vault: { value: input.token0Vault ?? null, isWritable: true },
    token1Vault: { value: input.token1Vault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: false },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.ownerLpToken),
      getAccountMeta(accounts.token0Account),
      getAccountMeta(accounts.token1Account),
      getAccountMeta(accounts.token0Vault),
      getAccountMeta(accounts.token1Vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.memoProgram),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountAuthority,
    TAccountPoolState,
    TAccountOwnerLpToken,
    TAccountToken0Account,
    TAccountToken1Account,
    TAccountToken0Vault,
    TAccountToken1Vault,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountLpMint,
    TAccountMemoProgram
  >);
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof RAYDIUM_CP_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pays to mint the position */
    owner: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** Pool state account */
    poolState: TAccountMetas[2];
    /** Owner lp token account */
    ownerLpToken: TAccountMetas[3];
    /** The owner's token account for receive token_0 */
    token0Account: TAccountMetas[4];
    /** The owner's token account for receive token_1 */
    token1Account: TAccountMetas[5];
    /** The address that holds pool tokens for token_0 */
    token0Vault: TAccountMetas[6];
    /** The address that holds pool tokens for token_1 */
    token1Vault: TAccountMetas[7];
    /** token Program */
    tokenProgram: TAccountMetas[8];
    /** Token program 2022 */
    tokenProgram2022: TAccountMetas[9];
    /** The mint of token_0 vault */
    vault0Mint: TAccountMetas[10];
    /** The mint of token_1 vault */
    vault1Mint: TAccountMetas[11];
    /** Pool lp token mint */
    lpMint: TAccountMetas[12];
    /** memo program */
    memoProgram: TAccountMetas[13];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      authority: getNextAccount(),
      poolState: getNextAccount(),
      ownerLpToken: getNextAccount(),
      token0Account: getNextAccount(),
      token1Account: getNextAccount(),
      token0Vault: getNextAccount(),
      token1Vault: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
      vault0Mint: getNextAccount(),
      vault1Mint: getNextAccount(),
      lpMint: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
