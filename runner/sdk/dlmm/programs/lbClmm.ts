/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddLiquidity2Instruction,
  type ParsedAddLiquidityByStrategy2Instruction,
  type ParsedAddLiquidityByStrategyInstruction,
  type ParsedAddLiquidityByStrategyOneSideInstruction,
  type ParsedAddLiquidityByWeightInstruction,
  type ParsedAddLiquidityInstruction,
  type ParsedAddLiquidityOneSideInstruction,
  type ParsedAddLiquidityOneSidePrecise2Instruction,
  type ParsedAddLiquidityOneSidePreciseInstruction,
  type ParsedClaimFee2Instruction,
  type ParsedClaimFeeInstruction,
  type ParsedClaimReward2Instruction,
  type ParsedClaimRewardInstruction,
  type ParsedCloseClaimProtocolFeeOperatorInstruction,
  type ParsedClosePosition2Instruction,
  type ParsedClosePositionIfEmptyInstruction,
  type ParsedClosePositionInstruction,
  type ParsedClosePresetParameter2Instruction,
  type ParsedClosePresetParameterInstruction,
  type ParsedCreateClaimProtocolFeeOperatorInstruction,
  type ParsedFundRewardInstruction,
  type ParsedGoToABinInstruction,
  type ParsedIncreaseOracleLengthInstruction,
  type ParsedInitializeBinArrayBitmapExtensionInstruction,
  type ParsedInitializeBinArrayInstruction,
  type ParsedInitializeCustomizablePermissionlessLbPair2Instruction,
  type ParsedInitializeCustomizablePermissionlessLbPairInstruction,
  type ParsedInitializeLbPair2Instruction,
  type ParsedInitializeLbPairInstruction,
  type ParsedInitializePermissionLbPairInstruction,
  type ParsedInitializePositionByOperatorInstruction,
  type ParsedInitializePositionInstruction,
  type ParsedInitializePositionPdaInstruction,
  type ParsedInitializePresetParameter2Instruction,
  type ParsedInitializePresetParameterInstruction,
  type ParsedInitializeRewardInstruction,
  type ParsedInitializeTokenBadgeInstruction,
  type ParsedMigrateBinArrayInstruction,
  type ParsedMigratePositionInstruction,
  type ParsedRemoveAllLiquidityInstruction,
  type ParsedRemoveLiquidity2Instruction,
  type ParsedRemoveLiquidityByRange2Instruction,
  type ParsedRemoveLiquidityByRangeInstruction,
  type ParsedRemoveLiquidityInstruction,
  type ParsedSetActivationPointInstruction,
  type ParsedSetPairStatusInstruction,
  type ParsedSetPairStatusPermissionlessInstruction,
  type ParsedSetPreActivationDurationInstruction,
  type ParsedSetPreActivationSwapAddressInstruction,
  type ParsedSwap2Instruction,
  type ParsedSwapExactOut2Instruction,
  type ParsedSwapExactOutInstruction,
  type ParsedSwapInstruction,
  type ParsedSwapWithPriceImpact2Instruction,
  type ParsedSwapWithPriceImpactInstruction,
  type ParsedUpdateBaseFeeParametersInstruction,
  type ParsedUpdateDynamicFeeParametersInstruction,
  type ParsedUpdateFeesAndReward2Instruction,
  type ParsedUpdateFeesAndRewardsInstruction,
  type ParsedUpdatePositionOperatorInstruction,
  type ParsedUpdateRewardDurationInstruction,
  type ParsedUpdateRewardFunderInstruction,
  type ParsedWithdrawIneligibleRewardInstruction,
  type ParsedWithdrawProtocolFeeInstruction,
} from '../instructions';

export const LB_CLMM_PROGRAM_ADDRESS = '' as Address<''>;

export enum LbClmmAccount {
  BinArrayBitmapExtension,
  BinArray,
  ClaimFeeOperator,
  LbPair,
  Oracle,
  Position,
  PositionV2,
  PresetParameter2,
  PresetParameter,
  TokenBadge,
}

export function identifyLbClmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LbClmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 111, 124, 113, 55, 237, 18, 5])
      ),
      0
    )
  ) {
    return LbClmmAccount.BinArrayBitmapExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([92, 142, 92, 220, 5, 148, 70, 181])
      ),
      0
    )
  ) {
    return LbClmmAccount.BinArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 48, 134, 86, 34, 200, 188, 150])
      ),
      0
    )
  ) {
    return LbClmmAccount.ClaimFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 11, 49, 98, 181, 101, 177, 13])
      ),
      0
    )
  ) {
    return LbClmmAccount.LbPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 194, 131, 179, 140, 179, 229, 244])
      ),
      0
    )
  ) {
    return LbClmmAccount.Oracle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
      ),
      0
    )
  ) {
    return LbClmmAccount.Position;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 176, 212, 199, 245, 180, 133, 182])
      ),
      0
    )
  ) {
    return LbClmmAccount.PositionV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 236, 148, 115, 162, 113, 222, 174])
      ),
      0
    )
  ) {
    return LbClmmAccount.PresetParameter2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 62, 244, 34, 181, 112, 58, 170])
      ),
      0
    )
  ) {
    return LbClmmAccount.PresetParameter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 219, 204, 229, 249, 116, 255, 150])
      ),
      0
    )
  ) {
    return LbClmmAccount.TokenBadge;
  }
  throw new Error(
    'The provided account could not be identified as a lbClmm account.'
  );
}

export enum LbClmmInstruction {
  InitializeLbPair,
  InitializePermissionLbPair,
  InitializeCustomizablePermissionlessLbPair,
  InitializeBinArrayBitmapExtension,
  InitializeBinArray,
  AddLiquidity,
  AddLiquidityByWeight,
  AddLiquidityByStrategy,
  AddLiquidityByStrategyOneSide,
  AddLiquidityOneSide,
  RemoveLiquidity,
  InitializePosition,
  InitializePositionPda,
  InitializePositionByOperator,
  UpdatePositionOperator,
  Swap,
  SwapExactOut,
  SwapWithPriceImpact,
  WithdrawProtocolFee,
  InitializeReward,
  FundReward,
  UpdateRewardFunder,
  UpdateRewardDuration,
  ClaimReward,
  ClaimFee,
  ClosePosition,
  UpdateBaseFeeParameters,
  UpdateDynamicFeeParameters,
  IncreaseOracleLength,
  InitializePresetParameter,
  ClosePresetParameter,
  ClosePresetParameter2,
  RemoveAllLiquidity,
  SetPairStatus,
  MigratePosition,
  MigrateBinArray,
  UpdateFeesAndRewards,
  WithdrawIneligibleReward,
  SetActivationPoint,
  RemoveLiquidityByRange,
  AddLiquidityOneSidePrecise,
  GoToABin,
  SetPreActivationDuration,
  SetPreActivationSwapAddress,
  SetPairStatusPermissionless,
  InitializeTokenBadge,
  CreateClaimProtocolFeeOperator,
  CloseClaimProtocolFeeOperator,
  InitializePresetParameter2,
  InitializeLbPair2,
  InitializeCustomizablePermissionlessLbPair2,
  ClaimFee2,
  ClaimReward2,
  AddLiquidity2,
  AddLiquidityByStrategy2,
  AddLiquidityOneSidePrecise2,
  RemoveLiquidity2,
  RemoveLiquidityByRange2,
  Swap2,
  SwapExactOut2,
  SwapWithPriceImpact2,
  ClosePosition2,
  UpdateFeesAndReward2,
  ClosePositionIfEmpty,
}

export function identifyLbClmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LbClmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([45, 154, 237, 210, 221, 15, 166, 92])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeLbPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 102, 213, 85, 251, 3, 53, 21])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePermissionLbPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 39, 41, 135, 111, 183, 200, 64])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeCustomizablePermissionlessLbPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([47, 157, 226, 180, 12, 240, 33, 71])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeBinArrayBitmapExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([35, 86, 19, 185, 78, 212, 75, 211])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeBinArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 140, 238, 99, 231, 162, 21, 149])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityByWeight;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 3, 150, 127, 148, 40, 61, 200])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityByStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 5, 238, 175, 100, 225, 6, 205])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityByStrategyOneSide;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 155, 103, 151, 70, 95, 220, 165])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityOneSide;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 85, 209, 72, 24, 206, 177, 108])
      ),
      0
    )
  ) {
    return LbClmmInstruction.RemoveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 192, 234, 71, 190, 191, 102, 80])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 82, 125, 146, 85, 141, 228, 153])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePositionPda;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 189, 190, 244, 117, 254, 35, 148])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePositionByOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([202, 184, 103, 143, 180, 191, 116, 217])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdatePositionOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return LbClmmInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 73, 101, 33, 38, 207, 75, 184])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SwapExactOut;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 173, 230, 208, 173, 228, 156, 205])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SwapWithPriceImpact;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 201, 158, 189, 33, 93, 162, 103])
      ),
      0
    )
  ) {
    return LbClmmInstruction.WithdrawProtocolFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 50, 249, 165, 93, 151, 38, 63])
      ),
      0
    )
  ) {
    return LbClmmInstruction.FundReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 28, 48, 32, 215, 160, 35, 23])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateRewardFunder;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 174, 196, 169, 213, 235, 254, 107])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateRewardDuration;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 95, 181, 242, 94, 90, 158, 162])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClaimReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 32, 79, 137, 136, 232, 70, 137])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClaimFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 134, 81, 0, 49, 68, 98, 98])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClosePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 168, 223, 161, 16, 195, 3, 47])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateBaseFeeParameters;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([92, 161, 46, 246, 255, 189, 22, 22])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateDynamicFeeParameters;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 61, 125, 87, 103, 79, 158, 173])
      ),
      0
    )
  ) {
    return LbClmmInstruction.IncreaseOracleLength;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([66, 188, 71, 211, 98, 109, 14, 186])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePresetParameter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([4, 148, 145, 100, 134, 26, 181, 61])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClosePresetParameter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 25, 95, 107, 116, 17, 115, 28])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClosePresetParameter2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 51, 61, 35, 112, 105, 24, 85])
      ),
      0
    )
  ) {
    return LbClmmInstruction.RemoveAllLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([67, 248, 231, 137, 154, 149, 217, 174])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SetPairStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([15, 132, 59, 50, 199, 6, 251, 46])
      ),
      0
    )
  ) {
    return LbClmmInstruction.MigratePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 23, 159, 211, 101, 184, 41, 241])
      ),
      0
    )
  ) {
    return LbClmmInstruction.MigrateBinArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 230, 250, 13, 236, 209, 75, 223])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateFeesAndRewards;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 206, 42, 195, 247, 49, 103, 8])
      ),
      0
    )
  ) {
    return LbClmmInstruction.WithdrawIneligibleReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 249, 15, 165, 26, 129, 254, 125])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SetActivationPoint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 82, 102, 152, 240, 74, 105, 26])
      ),
      0
    )
  ) {
    return LbClmmInstruction.RemoveLiquidityByRange;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 194, 103, 84, 171, 71, 250, 154])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityOneSidePrecise;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([146, 72, 174, 224, 40, 253, 84, 174])
      ),
      0
    )
  ) {
    return LbClmmInstruction.GoToABin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 61, 201, 244, 130, 159, 22, 100])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SetPreActivationDuration;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 139, 47, 123, 216, 80, 223, 10])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SetPreActivationSwapAddress;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 59, 152, 211, 70, 183, 46, 208])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SetPairStatusPermissionless;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 77, 205, 95, 27, 224, 89, 223])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeTokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 19, 150, 252, 105, 157, 48, 91])
      ),
      0
    )
  ) {
    return LbClmmInstruction.CreateClaimProtocolFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 41, 87, 35, 80, 48, 121, 26])
      ),
      0
    )
  ) {
    return LbClmmInstruction.CloseClaimProtocolFeeOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 7, 240, 171, 103, 47, 183, 121])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializePresetParameter2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 59, 36, 120, 237, 83, 108, 198])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeLbPair2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 73, 129, 126, 51, 19, 241, 107])
      ),
      0
    )
  ) {
    return LbClmmInstruction.InitializeCustomizablePermissionlessLbPair2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 191, 101, 171, 28, 144, 127, 187])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClaimFee2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 3, 127, 119, 178, 87, 157, 183])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClaimReward2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 162, 78, 28, 70, 219, 116, 115])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidity2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([3, 221, 149, 218, 111, 141, 118, 213])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityByStrategy2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 51, 163, 201, 117, 98, 125, 231])
      ),
      0
    )
  ) {
    return LbClmmInstruction.AddLiquidityOneSidePrecise2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([230, 215, 82, 127, 241, 101, 227, 146])
      ),
      0
    )
  ) {
    return LbClmmInstruction.RemoveLiquidity2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 2, 195, 145, 53, 145, 145, 205])
      ),
      0
    )
  ) {
    return LbClmmInstruction.RemoveLiquidityByRange2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 75, 63, 76, 235, 91, 91, 136])
      ),
      0
    )
  ) {
    return LbClmmInstruction.Swap2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 215, 247, 132, 137, 60, 243, 81])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SwapExactOut2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 98, 192, 214, 177, 51, 75, 51])
      ),
      0
    )
  ) {
    return LbClmmInstruction.SwapWithPriceImpact2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 90, 35, 115, 186, 40, 147, 226])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClosePosition2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([32, 142, 184, 154, 103, 65, 184, 88])
      ),
      0
    )
  ) {
    return LbClmmInstruction.UpdateFeesAndReward2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 124, 212, 118, 91, 152, 110, 157])
      ),
      0
    )
  ) {
    return LbClmmInstruction.ClosePositionIfEmpty;
  }
  throw new Error(
    'The provided instruction could not be identified as a lbClmm instruction.'
  );
}

export type ParsedLbClmmInstruction<TProgram extends string = ''> =
  | ({
      instructionType: LbClmmInstruction.InitializeLbPair;
    } & ParsedInitializeLbPairInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePermissionLbPair;
    } & ParsedInitializePermissionLbPairInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeCustomizablePermissionlessLbPair;
    } & ParsedInitializeCustomizablePermissionlessLbPairInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeBinArrayBitmapExtension;
    } & ParsedInitializeBinArrayBitmapExtensionInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeBinArray;
    } & ParsedInitializeBinArrayInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidity;
    } & ParsedAddLiquidityInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityByWeight;
    } & ParsedAddLiquidityByWeightInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityByStrategy;
    } & ParsedAddLiquidityByStrategyInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityByStrategyOneSide;
    } & ParsedAddLiquidityByStrategyOneSideInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityOneSide;
    } & ParsedAddLiquidityOneSideInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.RemoveLiquidity;
    } & ParsedRemoveLiquidityInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePosition;
    } & ParsedInitializePositionInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePositionPda;
    } & ParsedInitializePositionPdaInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePositionByOperator;
    } & ParsedInitializePositionByOperatorInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdatePositionOperator;
    } & ParsedUpdatePositionOperatorInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SwapExactOut;
    } & ParsedSwapExactOutInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SwapWithPriceImpact;
    } & ParsedSwapWithPriceImpactInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.WithdrawProtocolFee;
    } & ParsedWithdrawProtocolFeeInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeReward;
    } & ParsedInitializeRewardInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.FundReward;
    } & ParsedFundRewardInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateRewardFunder;
    } & ParsedUpdateRewardFunderInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateRewardDuration;
    } & ParsedUpdateRewardDurationInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClaimReward;
    } & ParsedClaimRewardInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClaimFee;
    } & ParsedClaimFeeInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClosePosition;
    } & ParsedClosePositionInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateBaseFeeParameters;
    } & ParsedUpdateBaseFeeParametersInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateDynamicFeeParameters;
    } & ParsedUpdateDynamicFeeParametersInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.IncreaseOracleLength;
    } & ParsedIncreaseOracleLengthInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePresetParameter;
    } & ParsedInitializePresetParameterInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClosePresetParameter;
    } & ParsedClosePresetParameterInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClosePresetParameter2;
    } & ParsedClosePresetParameter2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.RemoveAllLiquidity;
    } & ParsedRemoveAllLiquidityInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SetPairStatus;
    } & ParsedSetPairStatusInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.MigratePosition;
    } & ParsedMigratePositionInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.MigrateBinArray;
    } & ParsedMigrateBinArrayInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateFeesAndRewards;
    } & ParsedUpdateFeesAndRewardsInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.WithdrawIneligibleReward;
    } & ParsedWithdrawIneligibleRewardInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SetActivationPoint;
    } & ParsedSetActivationPointInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.RemoveLiquidityByRange;
    } & ParsedRemoveLiquidityByRangeInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityOneSidePrecise;
    } & ParsedAddLiquidityOneSidePreciseInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.GoToABin;
    } & ParsedGoToABinInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SetPreActivationDuration;
    } & ParsedSetPreActivationDurationInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SetPreActivationSwapAddress;
    } & ParsedSetPreActivationSwapAddressInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SetPairStatusPermissionless;
    } & ParsedSetPairStatusPermissionlessInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeTokenBadge;
    } & ParsedInitializeTokenBadgeInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.CreateClaimProtocolFeeOperator;
    } & ParsedCreateClaimProtocolFeeOperatorInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.CloseClaimProtocolFeeOperator;
    } & ParsedCloseClaimProtocolFeeOperatorInstruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializePresetParameter2;
    } & ParsedInitializePresetParameter2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeLbPair2;
    } & ParsedInitializeLbPair2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.InitializeCustomizablePermissionlessLbPair2;
    } & ParsedInitializeCustomizablePermissionlessLbPair2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClaimFee2;
    } & ParsedClaimFee2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClaimReward2;
    } & ParsedClaimReward2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidity2;
    } & ParsedAddLiquidity2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityByStrategy2;
    } & ParsedAddLiquidityByStrategy2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.AddLiquidityOneSidePrecise2;
    } & ParsedAddLiquidityOneSidePrecise2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.RemoveLiquidity2;
    } & ParsedRemoveLiquidity2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.RemoveLiquidityByRange2;
    } & ParsedRemoveLiquidityByRange2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.Swap2;
    } & ParsedSwap2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SwapExactOut2;
    } & ParsedSwapExactOut2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.SwapWithPriceImpact2;
    } & ParsedSwapWithPriceImpact2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClosePosition2;
    } & ParsedClosePosition2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.UpdateFeesAndReward2;
    } & ParsedUpdateFeesAndReward2Instruction<TProgram>)
  | ({
      instructionType: LbClmmInstruction.ClosePositionIfEmpty;
    } & ParsedClosePositionIfEmptyInstruction<TProgram>);
