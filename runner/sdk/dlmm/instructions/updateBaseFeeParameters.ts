/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_BASE_FEE_PARAMETERS_DISCRIMINATOR = new Uint8Array([
  75, 168, 223, 161, 16, 195, 3, 47,
]);

export function getUpdateBaseFeeParametersDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_BASE_FEE_PARAMETERS_DISCRIMINATOR
  );
}

export type UpdateBaseFeeParametersInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateBaseFeeParametersInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
  protocolShare: number;
  /** Base factor for base fee rate */
  baseFactor: number;
  /** Base fee power factor */
  baseFeePowerFactor: number;
};

export type UpdateBaseFeeParametersInstructionDataArgs = {
  /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
  protocolShare: number;
  /** Base factor for base fee rate */
  baseFactor: number;
  /** Base fee power factor */
  baseFeePowerFactor: number;
};

export function getUpdateBaseFeeParametersInstructionDataEncoder(): FixedSizeEncoder<UpdateBaseFeeParametersInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['protocolShare', getU16Encoder()],
      ['baseFactor', getU16Encoder()],
      ['baseFeePowerFactor', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_BASE_FEE_PARAMETERS_DISCRIMINATOR,
    })
  );
}

export function getUpdateBaseFeeParametersInstructionDataDecoder(): FixedSizeDecoder<UpdateBaseFeeParametersInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['protocolShare', getU16Decoder()],
    ['baseFactor', getU16Decoder()],
    ['baseFeePowerFactor', getU8Decoder()],
  ]);
}

export function getUpdateBaseFeeParametersInstructionDataCodec(): FixedSizeCodec<
  UpdateBaseFeeParametersInstructionDataArgs,
  UpdateBaseFeeParametersInstructionData
> {
  return combineCodec(
    getUpdateBaseFeeParametersInstructionDataEncoder(),
    getUpdateBaseFeeParametersInstructionDataDecoder()
  );
}

export type UpdateBaseFeeParametersInput<
  TAccountLbPair extends string = string,
  TAccountAdmin extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  admin: TransactionSigner<TAccountAdmin>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  protocolShare: UpdateBaseFeeParametersInstructionDataArgs['protocolShare'];
  baseFactor: UpdateBaseFeeParametersInstructionDataArgs['baseFactor'];
  baseFeePowerFactor: UpdateBaseFeeParametersInstructionDataArgs['baseFeePowerFactor'];
};

export function getUpdateBaseFeeParametersInstruction<
  TAccountLbPair extends string,
  TAccountAdmin extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: UpdateBaseFeeParametersInput<
    TAccountLbPair,
    TAccountAdmin,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateBaseFeeParametersInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountAdmin,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getUpdateBaseFeeParametersInstructionDataEncoder().encode(
      args as UpdateBaseFeeParametersInstructionDataArgs
    ),
    programAddress,
  } as UpdateBaseFeeParametersInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountAdmin,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedUpdateBaseFeeParametersInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    admin: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: UpdateBaseFeeParametersInstructionData;
};

export function parseUpdateBaseFeeParametersInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateBaseFeeParametersInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      admin: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getUpdateBaseFeeParametersInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
