/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const POOL_STATE_DISCRIMINATOR = new Uint8Array([
  247, 237, 227, 245, 215, 195, 222, 70,
]);

export function getPoolStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_STATE_DISCRIMINATOR);
}

export type PoolState = {
  discriminator: ReadonlyUint8Array;
  /** Which config the pool belongs */
  ammConfig: Address;
  /** pool creator */
  poolCreator: Address;
  /** Token A */
  token0Vault: Address;
  /** Token B */
  token1Vault: Address;
  /**
   * Pool tokens are issued when A or B tokens are deposited.
   * Pool tokens can be withdrawn back to the original A or B token.
   */
  lpMint: Address;
  /** Mint information for token A */
  token0Mint: Address;
  /** Mint information for token B */
  token1Mint: Address;
  /** token_0 program */
  token0Program: Address;
  /** token_1 program */
  token1Program: Address;
  /** observation account to store oracle data */
  observationKey: Address;
  authBump: number;
  /**
   * Bitwise representation of the state of the pool
   * bit0, 1: disable deposit(vaule is 1), 0: normal
   * bit1, 1: disable withdraw(vaule is 2), 0: normal
   * bit2, 1: disable swap(vaule is 4), 0: normal
   */
  status: number;
  lpMintDecimals: number;
  /** mint0 and mint1 decimals */
  mint0Decimals: number;
  mint1Decimals: number;
  /** lp mint supply */
  lpSupply: bigint;
  /** The amounts of token_0 and token_1 that are owed to the liquidity provider. */
  protocolFeesToken0: bigint;
  protocolFeesToken1: bigint;
  fundFeesToken0: bigint;
  fundFeesToken1: bigint;
  /** The timestamp allowed for swap in the pool. */
  openTime: bigint;
  /** padding for future updates */
  padding: Array<bigint>;
};

export type PoolStateArgs = {
  /** Which config the pool belongs */
  ammConfig: Address;
  /** pool creator */
  poolCreator: Address;
  /** Token A */
  token0Vault: Address;
  /** Token B */
  token1Vault: Address;
  /**
   * Pool tokens are issued when A or B tokens are deposited.
   * Pool tokens can be withdrawn back to the original A or B token.
   */
  lpMint: Address;
  /** Mint information for token A */
  token0Mint: Address;
  /** Mint information for token B */
  token1Mint: Address;
  /** token_0 program */
  token0Program: Address;
  /** token_1 program */
  token1Program: Address;
  /** observation account to store oracle data */
  observationKey: Address;
  authBump: number;
  /**
   * Bitwise representation of the state of the pool
   * bit0, 1: disable deposit(vaule is 1), 0: normal
   * bit1, 1: disable withdraw(vaule is 2), 0: normal
   * bit2, 1: disable swap(vaule is 4), 0: normal
   */
  status: number;
  lpMintDecimals: number;
  /** mint0 and mint1 decimals */
  mint0Decimals: number;
  mint1Decimals: number;
  /** lp mint supply */
  lpSupply: number | bigint;
  /** The amounts of token_0 and token_1 that are owed to the liquidity provider. */
  protocolFeesToken0: number | bigint;
  protocolFeesToken1: number | bigint;
  fundFeesToken0: number | bigint;
  fundFeesToken1: number | bigint;
  /** The timestamp allowed for swap in the pool. */
  openTime: number | bigint;
  /** padding for future updates */
  padding: Array<number | bigint>;
};

export function getPoolStateEncoder(): FixedSizeEncoder<PoolStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['ammConfig', getAddressEncoder()],
      ['poolCreator', getAddressEncoder()],
      ['token0Vault', getAddressEncoder()],
      ['token1Vault', getAddressEncoder()],
      ['lpMint', getAddressEncoder()],
      ['token0Mint', getAddressEncoder()],
      ['token1Mint', getAddressEncoder()],
      ['token0Program', getAddressEncoder()],
      ['token1Program', getAddressEncoder()],
      ['observationKey', getAddressEncoder()],
      ['authBump', getU8Encoder()],
      ['status', getU8Encoder()],
      ['lpMintDecimals', getU8Encoder()],
      ['mint0Decimals', getU8Encoder()],
      ['mint1Decimals', getU8Encoder()],
      ['lpSupply', getU64Encoder()],
      ['protocolFeesToken0', getU64Encoder()],
      ['protocolFeesToken1', getU64Encoder()],
      ['fundFeesToken0', getU64Encoder()],
      ['fundFeesToken1', getU64Encoder()],
      ['openTime', getU64Encoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 32 })],
    ]),
    (value) => ({ ...value, discriminator: POOL_STATE_DISCRIMINATOR })
  );
}

export function getPoolStateDecoder(): FixedSizeDecoder<PoolState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['ammConfig', getAddressDecoder()],
    ['poolCreator', getAddressDecoder()],
    ['token0Vault', getAddressDecoder()],
    ['token1Vault', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['token0Mint', getAddressDecoder()],
    ['token1Mint', getAddressDecoder()],
    ['token0Program', getAddressDecoder()],
    ['token1Program', getAddressDecoder()],
    ['observationKey', getAddressDecoder()],
    ['authBump', getU8Decoder()],
    ['status', getU8Decoder()],
    ['lpMintDecimals', getU8Decoder()],
    ['mint0Decimals', getU8Decoder()],
    ['mint1Decimals', getU8Decoder()],
    ['lpSupply', getU64Decoder()],
    ['protocolFeesToken0', getU64Decoder()],
    ['protocolFeesToken1', getU64Decoder()],
    ['fundFeesToken0', getU64Decoder()],
    ['fundFeesToken1', getU64Decoder()],
    ['openTime', getU64Decoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 32 })],
  ]);
}

export function getPoolStateCodec(): FixedSizeCodec<PoolStateArgs, PoolState> {
  return combineCodec(getPoolStateEncoder(), getPoolStateDecoder());
}

export function decodePoolState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PoolState, TAddress>;
export function decodePoolState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PoolState, TAddress>;
export function decodePoolState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PoolState, TAddress> | MaybeAccount<PoolState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolStateDecoder()
  );
}

export async function fetchPoolState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PoolState, TAddress>> {
  const maybeAccount = await fetchMaybePoolState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePoolState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PoolState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePoolState(maybeAccount);
}

export async function fetchAllPoolState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PoolState>[]> {
  const maybeAccounts = await fetchAllMaybePoolState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePoolState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PoolState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePoolState(maybeAccount));
}

export function getPoolStateSize(): number {
  return 637;
}
