/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_REWARD_DISCRIMINATOR = new Uint8Array([
  149, 95, 181, 242, 94, 90, 158, 162,
]);

export function getClaimRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARD_DISCRIMINATOR
  );
}

export type ClaimRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountBinArrayLower extends string | AccountMeta<string> = string,
  TAccountBinArrayUpper extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountRewardVault extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountBinArrayLower extends string
        ? WritableAccount<TAccountBinArrayLower>
        : TAccountBinArrayLower,
      TAccountBinArrayUpper extends string
        ? WritableAccount<TAccountBinArrayUpper>
        : TAccountBinArrayUpper,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: bigint;
};

export type ClaimRewardInstructionDataArgs = { rewardIndex: number | bigint };

export function getClaimRewardInstructionDataEncoder(): FixedSizeEncoder<ClaimRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_REWARD_DISCRIMINATOR })
  );
}

export function getClaimRewardInstructionDataDecoder(): FixedSizeDecoder<ClaimRewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU64Decoder()],
  ]);
}

export function getClaimRewardInstructionDataCodec(): FixedSizeCodec<
  ClaimRewardInstructionDataArgs,
  ClaimRewardInstructionData
> {
  return combineCodec(
    getClaimRewardInstructionDataEncoder(),
    getClaimRewardInstructionDataDecoder()
  );
}

export type ClaimRewardInput<
  TAccountLbPair extends string = string,
  TAccountPosition extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountSender extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  position: Address<TAccountPosition>;
  binArrayLower: Address<TAccountBinArrayLower>;
  binArrayUpper: Address<TAccountBinArrayUpper>;
  sender: TransactionSigner<TAccountSender>;
  rewardVault: Address<TAccountRewardVault>;
  rewardMint: Address<TAccountRewardMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  rewardIndex: ClaimRewardInstructionDataArgs['rewardIndex'];
};

export function getClaimRewardInstruction<
  TAccountLbPair extends string,
  TAccountPosition extends string,
  TAccountBinArrayLower extends string,
  TAccountBinArrayUpper extends string,
  TAccountSender extends string,
  TAccountRewardVault extends string,
  TAccountRewardMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: ClaimRewardInput<
    TAccountLbPair,
    TAccountPosition,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimRewardInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountPosition,
  TAccountBinArrayLower,
  TAccountBinArrayUpper,
  TAccountSender,
  TAccountRewardVault,
  TAccountRewardMint,
  TAccountUserTokenAccount,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
    binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.binArrayLower),
      getAccountMeta(accounts.binArrayUpper),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getClaimRewardInstructionDataEncoder().encode(
      args as ClaimRewardInstructionDataArgs
    ),
    programAddress,
  } as ClaimRewardInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountPosition,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountRewardVault,
    TAccountRewardMint,
    TAccountUserTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedClaimRewardInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    position: TAccountMetas[1];
    binArrayLower: TAccountMetas[2];
    binArrayUpper: TAccountMetas[3];
    sender: TAccountMetas[4];
    rewardVault: TAccountMetas[5];
    rewardMint: TAccountMetas[6];
    userTokenAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
  };
  data: ClaimRewardInstructionData;
};

export function parseClaimRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      position: getNextAccount(),
      binArrayLower: getNextAccount(),
      binArrayUpper: getNextAccount(),
      sender: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardMint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimRewardInstructionDataDecoder().decode(instruction.data),
  };
}
