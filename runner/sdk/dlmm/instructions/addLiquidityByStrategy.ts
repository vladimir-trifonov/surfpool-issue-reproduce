/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getLiquidityParameterByStrategyDecoder,
  getLiquidityParameterByStrategyEncoder,
  type LiquidityParameterByStrategy,
  type LiquidityParameterByStrategyArgs,
} from '../types';

export const ADD_LIQUIDITY_BY_STRATEGY_DISCRIMINATOR = new Uint8Array([
  7, 3, 150, 127, 148, 40, 61, 200,
]);

export function getAddLiquidityByStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_BY_STRATEGY_DISCRIMINATOR
  );
}

export type AddLiquidityByStrategyInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountUserTokenX extends string | AccountMeta<string> = string,
  TAccountUserTokenY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountTokenXMint extends string | AccountMeta<string> = string,
  TAccountTokenYMint extends string | AccountMeta<string> = string,
  TAccountBinArrayLower extends string | AccountMeta<string> = string,
  TAccountBinArrayUpper extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountTokenXProgram extends string | AccountMeta<string> = string,
  TAccountTokenYProgram extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountUserTokenX extends string
        ? WritableAccount<TAccountUserTokenX>
        : TAccountUserTokenX,
      TAccountUserTokenY extends string
        ? WritableAccount<TAccountUserTokenY>
        : TAccountUserTokenY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountTokenXMint extends string
        ? ReadonlyAccount<TAccountTokenXMint>
        : TAccountTokenXMint,
      TAccountTokenYMint extends string
        ? ReadonlyAccount<TAccountTokenYMint>
        : TAccountTokenYMint,
      TAccountBinArrayLower extends string
        ? WritableAccount<TAccountBinArrayLower>
        : TAccountBinArrayLower,
      TAccountBinArrayUpper extends string
        ? WritableAccount<TAccountBinArrayUpper>
        : TAccountBinArrayUpper,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountTokenXProgram extends string
        ? ReadonlyAccount<TAccountTokenXProgram>
        : TAccountTokenXProgram,
      TAccountTokenYProgram extends string
        ? ReadonlyAccount<TAccountTokenYProgram>
        : TAccountTokenYProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityByStrategyInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityParameter: LiquidityParameterByStrategy;
};

export type AddLiquidityByStrategyInstructionDataArgs = {
  liquidityParameter: LiquidityParameterByStrategyArgs;
};

export function getAddLiquidityByStrategyInstructionDataEncoder(): FixedSizeEncoder<AddLiquidityByStrategyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['liquidityParameter', getLiquidityParameterByStrategyEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_LIQUIDITY_BY_STRATEGY_DISCRIMINATOR,
    })
  );
}

export function getAddLiquidityByStrategyInstructionDataDecoder(): FixedSizeDecoder<AddLiquidityByStrategyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['liquidityParameter', getLiquidityParameterByStrategyDecoder()],
  ]);
}

export function getAddLiquidityByStrategyInstructionDataCodec(): FixedSizeCodec<
  AddLiquidityByStrategyInstructionDataArgs,
  AddLiquidityByStrategyInstructionData
> {
  return combineCodec(
    getAddLiquidityByStrategyInstructionDataEncoder(),
    getAddLiquidityByStrategyInstructionDataDecoder()
  );
}

export type AddLiquidityByStrategyInput<
  TAccountPosition extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountTokenXMint extends string = string,
  TAccountTokenYMint extends string = string,
  TAccountBinArrayLower extends string = string,
  TAccountBinArrayUpper extends string = string,
  TAccountSender extends string = string,
  TAccountTokenXProgram extends string = string,
  TAccountTokenYProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  position: Address<TAccountPosition>;
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  userTokenX: Address<TAccountUserTokenX>;
  userTokenY: Address<TAccountUserTokenY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  tokenXMint: Address<TAccountTokenXMint>;
  tokenYMint: Address<TAccountTokenYMint>;
  binArrayLower: Address<TAccountBinArrayLower>;
  binArrayUpper: Address<TAccountBinArrayUpper>;
  sender: TransactionSigner<TAccountSender>;
  tokenXProgram: Address<TAccountTokenXProgram>;
  tokenYProgram: Address<TAccountTokenYProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  liquidityParameter: AddLiquidityByStrategyInstructionDataArgs['liquidityParameter'];
};

export function getAddLiquidityByStrategyInstruction<
  TAccountPosition extends string,
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountUserTokenX extends string,
  TAccountUserTokenY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountTokenXMint extends string,
  TAccountTokenYMint extends string,
  TAccountBinArrayLower extends string,
  TAccountBinArrayUpper extends string,
  TAccountSender extends string,
  TAccountTokenXProgram extends string,
  TAccountTokenYProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: AddLiquidityByStrategyInput<
    TAccountPosition,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityByStrategyInstruction<
  TProgramAddress,
  TAccountPosition,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountUserTokenX,
  TAccountUserTokenY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountTokenXMint,
  TAccountTokenYMint,
  TAccountBinArrayLower,
  TAccountBinArrayUpper,
  TAccountSender,
  TAccountTokenXProgram,
  TAccountTokenYProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    position: { value: input.position ?? null, isWritable: true },
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    userTokenX: { value: input.userTokenX ?? null, isWritable: true },
    userTokenY: { value: input.userTokenY ?? null, isWritable: true },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    tokenXMint: { value: input.tokenXMint ?? null, isWritable: false },
    tokenYMint: { value: input.tokenYMint ?? null, isWritable: false },
    binArrayLower: { value: input.binArrayLower ?? null, isWritable: true },
    binArrayUpper: { value: input.binArrayUpper ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
    tokenXProgram: { value: input.tokenXProgram ?? null, isWritable: false },
    tokenYProgram: { value: input.tokenYProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.userTokenX),
      getAccountMeta(accounts.userTokenY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.tokenXMint),
      getAccountMeta(accounts.tokenYMint),
      getAccountMeta(accounts.binArrayLower),
      getAccountMeta(accounts.binArrayUpper),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.tokenXProgram),
      getAccountMeta(accounts.tokenYProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAddLiquidityByStrategyInstructionDataEncoder().encode(
      args as AddLiquidityByStrategyInstructionDataArgs
    ),
    programAddress,
  } as AddLiquidityByStrategyInstruction<
    TProgramAddress,
    TAccountPosition,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountUserTokenX,
    TAccountUserTokenY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountTokenXMint,
    TAccountTokenYMint,
    TAccountBinArrayLower,
    TAccountBinArrayUpper,
    TAccountSender,
    TAccountTokenXProgram,
    TAccountTokenYProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedAddLiquidityByStrategyInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    position: TAccountMetas[0];
    lbPair: TAccountMetas[1];
    binArrayBitmapExtension?: TAccountMetas[2] | undefined;
    userTokenX: TAccountMetas[3];
    userTokenY: TAccountMetas[4];
    reserveX: TAccountMetas[5];
    reserveY: TAccountMetas[6];
    tokenXMint: TAccountMetas[7];
    tokenYMint: TAccountMetas[8];
    binArrayLower: TAccountMetas[9];
    binArrayUpper: TAccountMetas[10];
    sender: TAccountMetas[11];
    tokenXProgram: TAccountMetas[12];
    tokenYProgram: TAccountMetas[13];
    eventAuthority: TAccountMetas[14];
    program: TAccountMetas[15];
  };
  data: AddLiquidityByStrategyInstructionData;
};

export function parseAddLiquidityByStrategyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddLiquidityByStrategyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      position: getNextAccount(),
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      userTokenX: getNextAccount(),
      userTokenY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      tokenXMint: getNextAccount(),
      tokenYMint: getNextAccount(),
      binArrayLower: getNextAccount(),
      binArrayUpper: getNextAccount(),
      sender: getNextAccount(),
      tokenXProgram: getNextAccount(),
      tokenYProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAddLiquidityByStrategyInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
