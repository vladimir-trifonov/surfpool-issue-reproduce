/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_PERMISSION_LB_PAIR_DISCRIMINATOR = new Uint8Array([
  108, 102, 213, 85, 251, 3, 53, 21,
]);

export function getInitializePermissionLbPairDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_PERMISSION_LB_PAIR_DISCRIMINATOR
  );
}

export type InitializePermissionLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountBase extends string | AccountMeta<string> = string,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountTokenMintX extends string | AccountMeta<string> = string,
  TAccountTokenMintY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTokenBadgeX extends string | AccountMeta<string> = string,
  TAccountTokenBadgeY extends string | AccountMeta<string> = string,
  TAccountTokenProgramX extends string | AccountMeta<string> = string,
  TAccountTokenProgramY extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & AccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountTokenMintX extends string
        ? ReadonlyAccount<TAccountTokenMintX>
        : TAccountTokenMintX,
      TAccountTokenMintY extends string
        ? ReadonlyAccount<TAccountTokenMintY>
        : TAccountTokenMintY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenBadgeX extends string
        ? ReadonlyAccount<TAccountTokenBadgeX>
        : TAccountTokenBadgeX,
      TAccountTokenBadgeY extends string
        ? ReadonlyAccount<TAccountTokenBadgeY>
        : TAccountTokenBadgeY,
      TAccountTokenProgramX extends string
        ? ReadonlyAccount<TAccountTokenProgramX>
        : TAccountTokenProgramX,
      TAccountTokenProgramY extends string
        ? ReadonlyAccount<TAccountTokenProgramY>
        : TAccountTokenProgramY,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePermissionLbPairInstructionData = {
  discriminator: ReadonlyUint8Array;
  activeId: number;
  binStep: number;
  baseFactor: number;
  baseFeePowerFactor: number;
  activationType: number;
  protocolShare: number;
};

export type InitializePermissionLbPairInstructionDataArgs = {
  activeId: number;
  binStep: number;
  baseFactor: number;
  baseFeePowerFactor: number;
  activationType: number;
  protocolShare: number;
};

export function getInitializePermissionLbPairInstructionDataEncoder(): FixedSizeEncoder<InitializePermissionLbPairInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['activeId', getI32Encoder()],
      ['binStep', getU16Encoder()],
      ['baseFactor', getU16Encoder()],
      ['baseFeePowerFactor', getU8Encoder()],
      ['activationType', getU8Encoder()],
      ['protocolShare', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_PERMISSION_LB_PAIR_DISCRIMINATOR,
    })
  );
}

export function getInitializePermissionLbPairInstructionDataDecoder(): FixedSizeDecoder<InitializePermissionLbPairInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['activeId', getI32Decoder()],
    ['binStep', getU16Decoder()],
    ['baseFactor', getU16Decoder()],
    ['baseFeePowerFactor', getU8Decoder()],
    ['activationType', getU8Decoder()],
    ['protocolShare', getU16Decoder()],
  ]);
}

export function getInitializePermissionLbPairInstructionDataCodec(): FixedSizeCodec<
  InitializePermissionLbPairInstructionDataArgs,
  InitializePermissionLbPairInstructionData
> {
  return combineCodec(
    getInitializePermissionLbPairInstructionDataEncoder(),
    getInitializePermissionLbPairInstructionDataDecoder()
  );
}

export type InitializePermissionLbPairInput<
  TAccountBase extends string = string,
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountTokenMintX extends string = string,
  TAccountTokenMintY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountOracle extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenBadgeX extends string = string,
  TAccountTokenBadgeY extends string = string,
  TAccountTokenProgramX extends string = string,
  TAccountTokenProgramY extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  base: TransactionSigner<TAccountBase>;
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  tokenMintX: Address<TAccountTokenMintX>;
  tokenMintY: Address<TAccountTokenMintY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  oracle: Address<TAccountOracle>;
  admin: TransactionSigner<TAccountAdmin>;
  tokenBadgeX?: Address<TAccountTokenBadgeX>;
  tokenBadgeY?: Address<TAccountTokenBadgeY>;
  tokenProgramX: Address<TAccountTokenProgramX>;
  tokenProgramY: Address<TAccountTokenProgramY>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  activeId: InitializePermissionLbPairInstructionDataArgs['activeId'];
  binStep: InitializePermissionLbPairInstructionDataArgs['binStep'];
  baseFactor: InitializePermissionLbPairInstructionDataArgs['baseFactor'];
  baseFeePowerFactor: InitializePermissionLbPairInstructionDataArgs['baseFeePowerFactor'];
  activationType: InitializePermissionLbPairInstructionDataArgs['activationType'];
  protocolShare: InitializePermissionLbPairInstructionDataArgs['protocolShare'];
};

export function getInitializePermissionLbPairInstruction<
  TAccountBase extends string,
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountTokenMintX extends string,
  TAccountTokenMintY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountOracle extends string,
  TAccountAdmin extends string,
  TAccountTokenBadgeX extends string,
  TAccountTokenBadgeY extends string,
  TAccountTokenProgramX extends string,
  TAccountTokenProgramY extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializePermissionLbPairInput<
    TAccountBase,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountAdmin,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePermissionLbPairInstruction<
  TProgramAddress,
  TAccountBase,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountTokenMintX,
  TAccountTokenMintY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountOracle,
  TAccountAdmin,
  TAccountTokenBadgeX,
  TAccountTokenBadgeY,
  TAccountTokenProgramX,
  TAccountTokenProgramY,
  TAccountSystemProgram,
  TAccountRent,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    base: { value: input.base ?? null, isWritable: false },
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    tokenMintX: { value: input.tokenMintX ?? null, isWritable: false },
    tokenMintY: { value: input.tokenMintY ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    tokenBadgeX: { value: input.tokenBadgeX ?? null, isWritable: false },
    tokenBadgeY: { value: input.tokenBadgeY ?? null, isWritable: false },
    tokenProgramX: { value: input.tokenProgramX ?? null, isWritable: false },
    tokenProgramY: { value: input.tokenProgramY ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.tokenMintX),
      getAccountMeta(accounts.tokenMintY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenBadgeX),
      getAccountMeta(accounts.tokenBadgeY),
      getAccountMeta(accounts.tokenProgramX),
      getAccountMeta(accounts.tokenProgramY),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializePermissionLbPairInstructionDataEncoder().encode(
      args as InitializePermissionLbPairInstructionDataArgs
    ),
    programAddress,
  } as InitializePermissionLbPairInstruction<
    TProgramAddress,
    TAccountBase,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountAdmin,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountRent,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializePermissionLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    base: TAccountMetas[0];
    lbPair: TAccountMetas[1];
    binArrayBitmapExtension?: TAccountMetas[2] | undefined;
    tokenMintX: TAccountMetas[3];
    tokenMintY: TAccountMetas[4];
    reserveX: TAccountMetas[5];
    reserveY: TAccountMetas[6];
    oracle: TAccountMetas[7];
    admin: TAccountMetas[8];
    tokenBadgeX?: TAccountMetas[9] | undefined;
    tokenBadgeY?: TAccountMetas[10] | undefined;
    tokenProgramX: TAccountMetas[11];
    tokenProgramY: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    rent: TAccountMetas[14];
    eventAuthority: TAccountMetas[15];
    program: TAccountMetas[16];
  };
  data: InitializePermissionLbPairInstructionData;
};

export function parseInitializePermissionLbPairInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePermissionLbPairInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      base: getNextAccount(),
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      tokenMintX: getNextAccount(),
      tokenMintY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      oracle: getNextAccount(),
      admin: getNextAccount(),
      tokenBadgeX: getNextOptionalAccount(),
      tokenBadgeY: getNextOptionalAccount(),
      tokenProgramX: getNextAccount(),
      tokenProgramY: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializePermissionLbPairInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
