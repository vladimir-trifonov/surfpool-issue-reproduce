/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_LB_PAIR2_DISCRIMINATOR = new Uint8Array([
  73, 59, 36, 120, 237, 83, 108, 198,
]);

export function getInitializeLbPair2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_LB_PAIR2_DISCRIMINATOR
  );
}

export type InitializeLbPair2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountTokenMintX extends string | AccountMeta<string> = string,
  TAccountTokenMintY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountPresetParameter extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountTokenBadgeX extends string | AccountMeta<string> = string,
  TAccountTokenBadgeY extends string | AccountMeta<string> = string,
  TAccountTokenProgramX extends string | AccountMeta<string> = string,
  TAccountTokenProgramY extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountTokenMintX extends string
        ? ReadonlyAccount<TAccountTokenMintX>
        : TAccountTokenMintX,
      TAccountTokenMintY extends string
        ? ReadonlyAccount<TAccountTokenMintY>
        : TAccountTokenMintY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountPresetParameter extends string
        ? ReadonlyAccount<TAccountPresetParameter>
        : TAccountPresetParameter,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenBadgeX extends string
        ? ReadonlyAccount<TAccountTokenBadgeX>
        : TAccountTokenBadgeX,
      TAccountTokenBadgeY extends string
        ? ReadonlyAccount<TAccountTokenBadgeY>
        : TAccountTokenBadgeY,
      TAccountTokenProgramX extends string
        ? ReadonlyAccount<TAccountTokenProgramX>
        : TAccountTokenProgramX,
      TAccountTokenProgramY extends string
        ? ReadonlyAccount<TAccountTokenProgramY>
        : TAccountTokenProgramY,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeLbPair2InstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Pool price */
  activeId: number;
  /** Padding, for future use */
  padding: ReadonlyUint8Array;
};

export type InitializeLbPair2InstructionDataArgs = {
  /** Pool price */
  activeId: number;
  /** Padding, for future use */
  padding: ReadonlyUint8Array;
};

export function getInitializeLbPair2InstructionDataEncoder(): FixedSizeEncoder<InitializeLbPair2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['activeId', getI32Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 96)],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_LB_PAIR2_DISCRIMINATOR })
  );
}

export function getInitializeLbPair2InstructionDataDecoder(): FixedSizeDecoder<InitializeLbPair2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['activeId', getI32Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 96)],
  ]);
}

export function getInitializeLbPair2InstructionDataCodec(): FixedSizeCodec<
  InitializeLbPair2InstructionDataArgs,
  InitializeLbPair2InstructionData
> {
  return combineCodec(
    getInitializeLbPair2InstructionDataEncoder(),
    getInitializeLbPair2InstructionDataDecoder()
  );
}

export type InitializeLbPair2Input<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountTokenMintX extends string = string,
  TAccountTokenMintY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountOracle extends string = string,
  TAccountPresetParameter extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenBadgeX extends string = string,
  TAccountTokenBadgeY extends string = string,
  TAccountTokenProgramX extends string = string,
  TAccountTokenProgramY extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  tokenMintX: Address<TAccountTokenMintX>;
  tokenMintY: Address<TAccountTokenMintY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  oracle: Address<TAccountOracle>;
  presetParameter: Address<TAccountPresetParameter>;
  funder: TransactionSigner<TAccountFunder>;
  tokenBadgeX?: Address<TAccountTokenBadgeX>;
  tokenBadgeY?: Address<TAccountTokenBadgeY>;
  tokenProgramX: Address<TAccountTokenProgramX>;
  tokenProgramY: Address<TAccountTokenProgramY>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  activeId: InitializeLbPair2InstructionDataArgs['activeId'];
  padding: InitializeLbPair2InstructionDataArgs['padding'];
};

export function getInitializeLbPair2Instruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountTokenMintX extends string,
  TAccountTokenMintY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountOracle extends string,
  TAccountPresetParameter extends string,
  TAccountFunder extends string,
  TAccountTokenBadgeX extends string,
  TAccountTokenBadgeY extends string,
  TAccountTokenProgramX extends string,
  TAccountTokenProgramY extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeLbPair2Input<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountPresetParameter,
    TAccountFunder,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeLbPair2Instruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountTokenMintX,
  TAccountTokenMintY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountOracle,
  TAccountPresetParameter,
  TAccountFunder,
  TAccountTokenBadgeX,
  TAccountTokenBadgeY,
  TAccountTokenProgramX,
  TAccountTokenProgramY,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    tokenMintX: { value: input.tokenMintX ?? null, isWritable: false },
    tokenMintY: { value: input.tokenMintY ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    presetParameter: {
      value: input.presetParameter ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenBadgeX: { value: input.tokenBadgeX ?? null, isWritable: false },
    tokenBadgeY: { value: input.tokenBadgeY ?? null, isWritable: false },
    tokenProgramX: { value: input.tokenProgramX ?? null, isWritable: false },
    tokenProgramY: { value: input.tokenProgramY ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.tokenMintX),
      getAccountMeta(accounts.tokenMintY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.presetParameter),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenBadgeX),
      getAccountMeta(accounts.tokenBadgeY),
      getAccountMeta(accounts.tokenProgramX),
      getAccountMeta(accounts.tokenProgramY),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializeLbPair2InstructionDataEncoder().encode(
      args as InitializeLbPair2InstructionDataArgs
    ),
    programAddress,
  } as InitializeLbPair2Instruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountPresetParameter,
    TAccountFunder,
    TAccountTokenBadgeX,
    TAccountTokenBadgeY,
    TAccountTokenProgramX,
    TAccountTokenProgramY,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializeLbPair2Instruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArrayBitmapExtension?: TAccountMetas[1] | undefined;
    tokenMintX: TAccountMetas[2];
    tokenMintY: TAccountMetas[3];
    reserveX: TAccountMetas[4];
    reserveY: TAccountMetas[5];
    oracle: TAccountMetas[6];
    presetParameter: TAccountMetas[7];
    funder: TAccountMetas[8];
    tokenBadgeX?: TAccountMetas[9] | undefined;
    tokenBadgeY?: TAccountMetas[10] | undefined;
    tokenProgramX: TAccountMetas[11];
    tokenProgramY: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    eventAuthority: TAccountMetas[14];
    program: TAccountMetas[15];
  };
  data: InitializeLbPair2InstructionData;
};

export function parseInitializeLbPair2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeLbPair2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      tokenMintX: getNextAccount(),
      tokenMintY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      oracle: getNextAccount(),
      presetParameter: getNextAccount(),
      funder: getNextAccount(),
      tokenBadgeX: getNextOptionalAccount(),
      tokenBadgeY: getNextOptionalAccount(),
      tokenProgramX: getNextAccount(),
      tokenProgramY: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeLbPair2InstructionDataDecoder().decode(instruction.data),
  };
}
