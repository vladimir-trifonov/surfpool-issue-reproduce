/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LB_CLMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCustomizableParamsDecoder,
  getCustomizableParamsEncoder,
  type CustomizableParams,
  type CustomizableParamsArgs,
} from '../types';

export const INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_DISCRIMINATOR =
  new Uint8Array([46, 39, 41, 135, 111, 183, 200, 64]);

export function getInitializeCustomizablePermissionlessLbPairDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_DISCRIMINATOR
  );
}

export type InitializeCustomizablePermissionlessLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountLbPair extends string | AccountMeta<string> = string,
  TAccountBinArrayBitmapExtension extends string | AccountMeta<string> = string,
  TAccountTokenMintX extends string | AccountMeta<string> = string,
  TAccountTokenMintY extends string | AccountMeta<string> = string,
  TAccountReserveX extends string | AccountMeta<string> = string,
  TAccountReserveY extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountUserTokenX extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountUserTokenY extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLbPair extends string
        ? WritableAccount<TAccountLbPair>
        : TAccountLbPair,
      TAccountBinArrayBitmapExtension extends string
        ? WritableAccount<TAccountBinArrayBitmapExtension>
        : TAccountBinArrayBitmapExtension,
      TAccountTokenMintX extends string
        ? ReadonlyAccount<TAccountTokenMintX>
        : TAccountTokenMintX,
      TAccountTokenMintY extends string
        ? ReadonlyAccount<TAccountTokenMintY>
        : TAccountTokenMintY,
      TAccountReserveX extends string
        ? WritableAccount<TAccountReserveX>
        : TAccountReserveX,
      TAccountReserveY extends string
        ? WritableAccount<TAccountReserveY>
        : TAccountReserveY,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountUserTokenX extends string
        ? ReadonlyAccount<TAccountUserTokenX>
        : TAccountUserTokenX,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountUserTokenY extends string
        ? ReadonlyAccount<TAccountUserTokenY>
        : TAccountUserTokenY,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCustomizablePermissionlessLbPairInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: CustomizableParams;
};

export type InitializeCustomizablePermissionlessLbPairInstructionDataArgs = {
  params: CustomizableParamsArgs;
};

export function getInitializeCustomizablePermissionlessLbPairInstructionDataEncoder(): Encoder<InitializeCustomizablePermissionlessLbPairInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getCustomizableParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator:
        INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_LB_PAIR_DISCRIMINATOR,
    })
  );
}

export function getInitializeCustomizablePermissionlessLbPairInstructionDataDecoder(): Decoder<InitializeCustomizablePermissionlessLbPairInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getCustomizableParamsDecoder()],
  ]);
}

export function getInitializeCustomizablePermissionlessLbPairInstructionDataCodec(): Codec<
  InitializeCustomizablePermissionlessLbPairInstructionDataArgs,
  InitializeCustomizablePermissionlessLbPairInstructionData
> {
  return combineCodec(
    getInitializeCustomizablePermissionlessLbPairInstructionDataEncoder(),
    getInitializeCustomizablePermissionlessLbPairInstructionDataDecoder()
  );
}

export type InitializeCustomizablePermissionlessLbPairInput<
  TAccountLbPair extends string = string,
  TAccountBinArrayBitmapExtension extends string = string,
  TAccountTokenMintX extends string = string,
  TAccountTokenMintY extends string = string,
  TAccountReserveX extends string = string,
  TAccountReserveY extends string = string,
  TAccountOracle extends string = string,
  TAccountUserTokenX extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountUserTokenY extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  lbPair: Address<TAccountLbPair>;
  binArrayBitmapExtension?: Address<TAccountBinArrayBitmapExtension>;
  tokenMintX: Address<TAccountTokenMintX>;
  tokenMintY: Address<TAccountTokenMintY>;
  reserveX: Address<TAccountReserveX>;
  reserveY: Address<TAccountReserveY>;
  oracle: Address<TAccountOracle>;
  userTokenX: Address<TAccountUserTokenX>;
  funder: TransactionSigner<TAccountFunder>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  userTokenY: Address<TAccountUserTokenY>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: InitializeCustomizablePermissionlessLbPairInstructionDataArgs['params'];
};

export function getInitializeCustomizablePermissionlessLbPairInstruction<
  TAccountLbPair extends string,
  TAccountBinArrayBitmapExtension extends string,
  TAccountTokenMintX extends string,
  TAccountTokenMintY extends string,
  TAccountReserveX extends string,
  TAccountReserveY extends string,
  TAccountOracle extends string,
  TAccountUserTokenX extends string,
  TAccountFunder extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountUserTokenY extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof LB_CLMM_PROGRAM_ADDRESS,
>(
  input: InitializeCustomizablePermissionlessLbPairInput<
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountUserTokenX,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountUserTokenY,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCustomizablePermissionlessLbPairInstruction<
  TProgramAddress,
  TAccountLbPair,
  TAccountBinArrayBitmapExtension,
  TAccountTokenMintX,
  TAccountTokenMintY,
  TAccountReserveX,
  TAccountReserveY,
  TAccountOracle,
  TAccountUserTokenX,
  TAccountFunder,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountUserTokenY,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LB_CLMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    lbPair: { value: input.lbPair ?? null, isWritable: true },
    binArrayBitmapExtension: {
      value: input.binArrayBitmapExtension ?? null,
      isWritable: true,
    },
    tokenMintX: { value: input.tokenMintX ?? null, isWritable: false },
    tokenMintY: { value: input.tokenMintY ?? null, isWritable: false },
    reserveX: { value: input.reserveX ?? null, isWritable: true },
    reserveY: { value: input.reserveY ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    userTokenX: { value: input.userTokenX ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    userTokenY: { value: input.userTokenY ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.lbPair),
      getAccountMeta(accounts.binArrayBitmapExtension),
      getAccountMeta(accounts.tokenMintX),
      getAccountMeta(accounts.tokenMintY),
      getAccountMeta(accounts.reserveX),
      getAccountMeta(accounts.reserveY),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.userTokenX),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.userTokenY),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getInitializeCustomizablePermissionlessLbPairInstructionDataEncoder().encode(
      args as InitializeCustomizablePermissionlessLbPairInstructionDataArgs
    ),
    programAddress,
  } as InitializeCustomizablePermissionlessLbPairInstruction<
    TProgramAddress,
    TAccountLbPair,
    TAccountBinArrayBitmapExtension,
    TAccountTokenMintX,
    TAccountTokenMintY,
    TAccountReserveX,
    TAccountReserveY,
    TAccountOracle,
    TAccountUserTokenX,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountUserTokenY,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedInitializeCustomizablePermissionlessLbPairInstruction<
  TProgram extends string = typeof LB_CLMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    lbPair: TAccountMetas[0];
    binArrayBitmapExtension?: TAccountMetas[1] | undefined;
    tokenMintX: TAccountMetas[2];
    tokenMintY: TAccountMetas[3];
    reserveX: TAccountMetas[4];
    reserveY: TAccountMetas[5];
    oracle: TAccountMetas[6];
    userTokenX: TAccountMetas[7];
    funder: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    userTokenY: TAccountMetas[11];
    eventAuthority: TAccountMetas[12];
    program: TAccountMetas[13];
  };
  data: InitializeCustomizablePermissionlessLbPairInstructionData;
};

export function parseInitializeCustomizablePermissionlessLbPairInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeCustomizablePermissionlessLbPairInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LB_CLMM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      lbPair: getNextAccount(),
      binArrayBitmapExtension: getNextOptionalAccount(),
      tokenMintX: getNextAccount(),
      tokenMintY: getNextAccount(),
      reserveX: getNextAccount(),
      reserveY: getNextAccount(),
      oracle: getNextAccount(),
      userTokenX: getNextAccount(),
      funder: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      userTokenY: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getInitializeCustomizablePermissionlessLbPairInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
